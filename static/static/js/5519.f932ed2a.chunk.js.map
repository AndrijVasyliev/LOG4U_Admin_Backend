{"version":3,"file":"static/js/5519.f932ed2a.chunk.js","mappings":"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","sources":["locations/locations.tsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/Edit.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { LocationsQuery, LocationDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Location } from '../utils/dataTypes';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Location;\r\n  getData: (row: Location) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'zipCode',\r\n    orderField: 'zipCode',\r\n    getData: (row) => ({ data: `${row.zipCode}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Zip Code',\r\n  },\r\n  {\r\n    id: 'name',\r\n    orderField: 'name',\r\n    getData: (row) => ({ data: `${row.name}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'City Name',\r\n  },\r\n  {\r\n    id: 'stateCode',\r\n    orderField: 'stateCode',\r\n    getData: (row) => ({ data: `${row.stateCode}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'State Code',\r\n  },\r\n  {\r\n    id: 'stateName',\r\n    orderField: 'stateName',\r\n    getData: (row) => ({ data: `${row.stateName}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'State Name',\r\n  },\r\n  {\r\n    id: 'location',\r\n    getData: (row) => ({ data: `${row.location.join(',')}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Geo Point',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Location,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Location) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [cityNameSearch, setCityNameSearch] = React.useState<string>('');\r\n  const [cityNameChanged, setCityNameChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(LocationDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['locations']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const cityNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCityNameSearch(event.target.value);\r\n    setCityNameChanged(true);\r\n  };\r\n  const locationClearHandler = () => {\r\n    setCityNameChanged(false);\r\n    setCityNameSearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setCityNameChanged(false);\r\n    setQueryParams({ search: cityNameSearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (cityNameSearch) {\r\n      filterHandler();\r\n    } else {\r\n      locationClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Locations\r\n        </Typography>\r\n      )}\r\n      <TextField\r\n        label=\"City Name\"\r\n        value={cityNameSearch}\r\n        onChange={cityNameHandler}\r\n        onKeyUp={keyUpHandler}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter list\">\r\n        {(cityNameChanged || !cityNameSearch) &&\r\n        !(cityNameChanged && !cityNameSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!cityNameSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={locationClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        <Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('asc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Location | undefined>(\r\n    'name',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['locations', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: LocationsQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows: Location[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Location,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Location) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["headCells","id","orderField","getData","row","data","concat","zipCode","numeric","disablePadding","label","name","stateCode","stateName","location","join","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","_jsx","children","_jsxs","TableRow","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","onClick","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","cityNameSearch","setCityNameSearch","React","cityNameChanged","setCityNameChanged","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","mutate","isLoading","useMutation","LocationDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","locationClearHandler","filterHandler","search","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","TextField","value","target","onKeyUp","key","size","Tooltip","title","IconButton","FilterListOffIcon","disabled","FilterListIcon","p","display","createHandler","relative","state","from","replace","AddIcon","editHandler","EditIcon","deleteHandler","DeleteIcon","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","LocationsQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","width","height","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","stopPropagation","selectedIndex","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","jsx","d"],"sourceRoot":""}