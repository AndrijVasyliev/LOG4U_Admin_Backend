{"version":3,"file":"static/js/9683.9849a084.chunk.js","mappings":"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","sources":["emails/emails.tsx","utils/dateTimeFormatters.ts"],"sourcesContent":["import * as React from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\n// import TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n// import Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\n// import IconButton from '@mui/material/IconButton';\r\n// import AddIcon from '@mui/icons-material/Add';\r\n// import EditIcon from '@mui/icons-material/Edit';\r\n// import DeleteIcon from '@mui/icons-material/Delete';\r\n// import FilterListIcon from '@mui/icons-material/FilterList';\r\n// import FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { EmailsQuery, UserDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Email, Person, User } from '../utils/dataTypes';\r\nimport { getPath, getType } from '../utils/queryHelpers';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\nimport { dateTimeFormatter } from '../utils/dateTimeFormatters';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Email;\r\n  getData: (row: Email) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'state',\r\n    orderField: 'state',\r\n    getData: (row) => ({ data: `${row.state}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'EmailÂ State',\r\n  },\r\n  {\r\n    id: 'createdAt',\r\n    orderField: 'createdAt',\r\n    getData: (row) => {\r\n      const firstRow = `${\r\n        row.createdAt ? dateTimeFormatter.format(new Date(row.createdAt)) : ''\r\n      }`;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'CreatedÂ At',\r\n  },\r\n  {\r\n    id: 'updatedAt',\r\n    orderField: 'updatedAt',\r\n    getData: (row) => {\r\n      const firstRow = `${\r\n        row.updatedAt ? dateTimeFormatter.format(new Date(row.updatedAt)) : ''\r\n      }`;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'UpdatedÂ At',\r\n  },\r\n  {\r\n    id: 'from',\r\n    getData: (row) => {\r\n      const firstRow = row.from;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'From',\r\n  },\r\n  {\r\n    id: 'subject',\r\n    getData: (row) => {\r\n      const firstRow = row.subject;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Subject',\r\n  },\r\n  {\r\n    id: 'to',\r\n    getData: (row) => {\r\n      const firstTo = row.to && row.to[0];\r\n      if (firstTo?.toType === 'Person') {\r\n        const to = firstTo.to as Person;\r\n        const firstRow = `${to.fullName}`;\r\n        const secondRow = `${getType(to)}`;\r\n        const path = `./${getPath(to)}/view/${to.id}`;\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {`${firstRow}`}\r\n              </a>\r\n              <br />\r\n              {`${secondRow}`}\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      }\r\n      if (firstTo?.toType === 'User') {\r\n        const to = firstTo.to as User;\r\n        const firstRow = `${to.fullName}`;\r\n        const secondRow = `${to.userRole}`;\r\n        const path = `./users/view/${to.id}`;\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {`${firstRow}`}\r\n              </a>\r\n              <br />\r\n              {`${secondRow}`}\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      }\r\n      return { data: '' };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'FirstÂ To',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Email,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Email) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected /*, setQueryParams*/ } = props;\r\n  // const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\r\n  // const [fullNameChanged, setFullNameChanged] = React.useState<boolean>(false);\r\n  // const location = useLocation();\r\n  // const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { /*mutate,*/ isLoading } = useMutation(UserDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['email']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  /*const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFullNameSearch(event.target.value);\r\n    setFullNameChanged(true);\r\n  };*/\r\n  /*const filterClearHandler = () => {\r\n    setFullNameChanged(false);\r\n    setFullNameSearch('');\r\n    setQueryParams({});\r\n  };*/\r\n  /*const filterHandler = () => {\r\n    setFullNameChanged(false);\r\n    setQueryParams({ fullName: fullNameSearch });\r\n  };*/\r\n  /*const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (fullNameSearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };*/\r\n  /*const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };*/\r\n  /*const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };*/\r\n  /*const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };*/\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Emails\r\n        </Typography>\r\n      )}\r\n      {/*<TextField\r\n        label=\"Full Name\"\r\n        value={fullNameSearch}\r\n        onChange={fullNameHandler}\r\n        onKeyUp={keyUpHandler}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter list\">\r\n        {(fullNameChanged || !fullNameSearch) &&\r\n        !(fullNameChanged && !fullNameSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!fullNameSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>*/}\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        {/*<Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>*/}\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('desc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Email | undefined>(\r\n    'createdAt',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  // const location = useLocation();\r\n  // const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    error,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['emails', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: EmailsQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n  });\r\n  React.useEffect(() => {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    setSnackbarMessage({\r\n      severity: 'error',\r\n      message: error instanceof Error ? error.message : JSON.stringify(error),\r\n    });\r\n  }, [error]);\r\n  const rows: Email[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Email,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Email) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick =\r\n    (/*event: React.MouseEvent<unknown>, item: (typeof rows)[number]*/) => {\r\n      /*navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });*/\r\n    };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(/*event*/) => handleClick(/*event, row*/)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","export const dateTimeFormatter = Intl.DateTimeFormat('en-US', {\r\n  year: 'numeric',\r\n  month: 'numeric',\r\n  day: 'numeric',\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n  second: 'numeric',\r\n  hour12: true,\r\n});\r\n"],"names":["headCells","id","orderField","getData","row","data","state","numeric","disablePadding","label","firstRow","createdAt","dateTimeFormatter","format","Date","_jsx","children","title","updatedAt","from","subject","firstTo","to","toType","fullName","secondRow","getType","path","getPath","_jsxs","href","target","onClick","stopPropagation","userRole","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","name","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","isLoading","useMutation","UserDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","p","display","Loader","visible","EnhancedTable","setOrder","React","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","setQueryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","EmailsQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","width","height","Paper","query","TableContainer","ref","Table","minWidth","size","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","selectedIndex","concat","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","value","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12"],"sourceRoot":""}