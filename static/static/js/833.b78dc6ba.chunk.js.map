{"version":3,"file":"static/js/833.b78dc6ba.chunk.js","mappings":"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","sources":["owners/owners.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport TableCell from '@mui/material/TableCell';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport Dialog from '@mui/material/Dialog';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\nimport Person4Icon from '@mui/icons-material/Person4';\nimport { visuallyHidden } from '@mui/utils';\n\nimport Loader from '../components/Loader';\n\nimport { OwnersQuery, OwnerDelete } from '../api';\nimport { useSnackbar } from '../hooks';\nimport { Order, Owner, Person } from '../utils/dataTypes';\nimport { getPath, getType } from '../utils/queryHelpers';\n\ninterface HeadCell {\n  id: string;\n  disablePadding: boolean;\n  orderField?: keyof Owner;\n  getData: (row: Owner) => { data: JSX.Element | string; title?: string };\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: readonly HeadCell[] = [\n  {\n    id: 'fullName',\n    orderField: 'fullName',\n    getData: (row) => ({ data: `${row.fullName}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'Full name',\n  },\n  {\n    id: 'type',\n    getData: (row) => {\n      const type = `${getType(row)} `;\n      let title = '';\n      if (row.type === 'Owner') {\n        title = 'Owner';\n      }\n      if (row.type === 'OwnerDriver') {\n        title = 'Owner/Driver';\n      }\n      return {\n        data: (\n          <span>\n            <b>{type}</b>\n          </span>\n        ),\n        title: title,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Type',\n  },\n  {\n    id: 'phone',\n    getData: (row) => {\n      const firstRow = `${row.phone}`;\n      const secondRow = `${row.phone2 ? row.phone2 : ''}`;\n      return {\n        data: (\n          <span>\n            <a\n              href={`tel:${firstRow}`}\n              target=\"_blank\"\n              onClick={stopPropagation}\n            >\n              {firstRow}\n            </a>\n            <br />\n            <a\n              href={secondRow ? `tel:${secondRow}` : undefined}\n              target=\"_blank\"\n              onClick={stopPropagation}\n            >\n              {secondRow || ' '}\n            </a>\n          </span>\n        ),\n        title: firstRow + '\\n' + secondRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Mobile phone',\n  },\n  {\n    id: 'email',\n    getData: (row) => {\n      const firstRow = `${row.email}`;\n      return {\n        data: (\n          <span>\n            <a\n              href={`mailto:${firstRow}`}\n              target=\"_blank\"\n              onClick={stopPropagation}\n            >\n              {firstRow}\n            </a>\n          </span>\n        ),\n        title: firstRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Email',\n  },\n  {\n    id: 'address',\n    getData: (row) => {\n      const firstRow = `${row.address}`;\n      return {\n        data: <span>{firstRow}</span>,\n        title: firstRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Address',\n  },\n  {\n    id: 'ownTrucks',\n    getData: (row) => {\n      if (row.ownTrucks && row.ownTrucks.length) {\n        const trucks = row.ownTrucks;\n        return {\n          data: (\n            <span>\n              {trucks.map((truck, index) => (\n                <a\n                  key={index}\n                  href={`/trucks/view/${truck.id}`}\n                  target=\"_blank\"\n                  onClick={stopPropagation}\n                >\n                  {`${truck.truckNumber}${\n                    index === trucks.length - 1 ? '' : ', '\n                  }`}\n                </a>\n              ))}\n            </span>\n          ),\n          title: trucks.map((truck) => truck.truckNumber).join(', '),\n        };\n      } else {\n        return { data: '' };\n      }\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'OWN TRUCKS',\n  },\n  {\n    id: 'driversCoordinators',\n    getData: (row) => {\n      if (row.coordinators || row.drivers) {\n        const items = new Map<string, Person>();\n        row.coordinators?.forEach((coordinator) =>\n          items.set(coordinator.id, {\n            id: coordinator.id,\n            fullName: coordinator.fullName,\n            type: coordinator.type,\n          }),\n        );\n        row.drivers?.forEach(\n          (driver) =>\n            !items.has(driver.id) &&\n            items.set(driver.id, {\n              id: driver.id,\n              fullName: driver.fullName,\n              type: driver.type,\n            }),\n        );\n        const persons = Array.from(items.values());\n        return {\n          data: (\n            <span>\n              {persons.map((person, index) => (\n                <a\n                  key={person.id}\n                  href={`./${getPath(person)}/view/${person.id}`}\n                  target=\"_blank\"\n                  onClick={stopPropagation}\n                >\n                  {`${person.fullName}${\n                    index === persons.length - 1 ? '' : ', '\n                  }`}\n                </a>\n              ))}\n            </span>\n          ),\n          title: persons.map((person) => person.fullName).join(', '),\n        };\n      } else {\n        return { data: '' };\n      }\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Drivers/coordinators',\n  },\n];\n\ninterface EnhancedTableProps {\n  numSelected: number;\n  onRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Owner,\n  ) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  order: Order | undefined;\n  orderBy: string | undefined;\n  rowCount: number;\n}\n\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\n  backgroundColor: theme.palette.background.default,\n}));\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  maxWidth: '100px',\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n}));\n\nfunction stopPropagation(e: React.SyntheticEvent) {\n  e.stopPropagation();\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler =\n    (property: keyof Owner) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n\n  return (\n    <StyledTableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            name={'enhanced-table-checkbox-select-all'}\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'enhanced-table-checkbox-select-all',\n            }}\n          />\n        </StyledTableCell>\n        {headCells.map((headCell) => (\n          <StyledTableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'center'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={headCell.orderField && orderBy === headCell.orderField}\n              hideSortIcon={!headCell.orderField}\n              direction={orderBy === headCell.orderField ? order : 'asc'}\n              onClick={\n                headCell.orderField\n                  ? createSortHandler(headCell.orderField)\n                  : () => {\n                      return;\n                    }\n              }\n            >\n              {headCell.label}\n              {headCell.orderField && orderBy === headCell.orderField ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </StyledTableCell>\n        ))}\n      </TableRow>\n    </StyledTableHead>\n  );\n}\n\ninterface EnhancedTableToolbarProps {\n  selected: readonly string[];\n  setQueryParams: React.Dispatch<\n    React.SetStateAction<Record<string, number | string>>\n  >;\n}\n\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\n  const { selected, setQueryParams } = props;\n  const [createDialogOpen, setCreateDialogOpen] =\n    React.useState<boolean>(false);\n  const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\n  const [truckNumberSearch, setTruckNumberSearch] = React.useState<number>(0);\n  const [searchChanged, setSearchChanged] = React.useState<boolean>(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  const setSnackbarMessage = useSnackbar();\n\n  const { mutate, isLoading } = useMutation(OwnerDelete, {\n    onSuccess: () => {\n      setSnackbarMessage({\n        severity: 'success',\n        message: 'Deleted',\n      });\n      queryClient.invalidateQueries(['owners']);\n    },\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFullNameSearch(event.target.value);\n    setSearchChanged(true);\n  };\n  const truckNumberHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Number.isFinite(Number(event.target.value))) {\n      setTruckNumberSearch(Number(event.target.value));\n      setSearchChanged(true);\n    }\n  };\n  const fullNameClearHandler = () => {\n    setSearchChanged(false);\n    setFullNameSearch('');\n    setTruckNumberSearch(0);\n    setQueryParams({});\n  };\n  const filterHandler = () => {\n    setSearchChanged(false);\n    const queryParams: Record<string, number | string> = {};\n    if (fullNameSearch) {\n      queryParams.fullName = fullNameSearch;\n    }\n    if (truckNumberSearch) {\n      queryParams.truckNumber = truckNumberSearch;\n    }\n    setQueryParams(queryParams);\n  };\n  const createHandler = () => {\n    setCreateDialogOpen(true);\n  };\n  const handleCloseCreateDialog = () => {\n    setCreateDialogOpen(false);\n  };\n  const editHandler = () => {\n    navigate(`./edit/${selected[0]}`, {\n      relative: 'path',\n      state: { from: location },\n      replace: false,\n    });\n  };\n  const deleteHandler = () => {\n    mutate(`${selected[0]}`);\n  };\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(selected.length > 0 && {\n          bgcolor: (theme) =>\n            alpha(\n              theme.palette.primary.main,\n              theme.palette.action.activatedOpacity,\n            ),\n        }),\n      }}\n    >\n      {selected.length > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {selected.length} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{\n            flex: '1 1 100%',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n          }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Owners\n        </Typography>\n      )}\n      <Box\n        component=\"div\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '140px' },\n        }}\n      >\n        <TextField\n          label=\"Full name\"\n          value={fullNameSearch}\n          onChange={fullNameHandler}\n          size=\"small\"\n        />\n      </Box>\n      <Box\n        component=\"div\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '140px' },\n        }}\n      >\n        <TextField\n          label=\"Truck Number\"\n          value={truckNumberSearch || ''}\n          onChange={truckNumberHandler}\n          size=\"small\"\n        />\n      </Box>\n      <Tooltip title=\"Filter list\">\n        {(searchChanged || (!fullNameSearch && !truckNumberSearch)) &&\n        (!(searchChanged && !fullNameSearch) ||\n          !(searchChanged && !truckNumberSearch)) ? (\n          <span>\n            <IconButton\n              disabled={!fullNameSearch && !truckNumberSearch}\n              onClick={filterHandler}\n            >\n              <FilterListIcon />\n            </IconButton>\n          </span>\n        ) : (\n          <span>\n            <IconButton onClick={fullNameClearHandler}>\n              <FilterListOffIcon />\n            </IconButton>\n          </span>\n        )}\n      </Tooltip>\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\n        <Tooltip title=\"Create\">\n          <span>\n            <IconButton onClick={createHandler}>\n              <AddIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n        <Tooltip title=\"Edit\">\n          <span>\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\n              <EditIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n        <Tooltip title=\"Delete\">\n          <span>\n            <IconButton\n              disabled={selected.length !== 1}\n              onClick={deleteHandler}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </Box>\n      <Dialog onClose={handleCloseCreateDialog} open={createDialogOpen}>\n        <DialogTitle>Select, what type of owner to create</DialogTitle>\n        <List sx={{ pt: 0 }}>\n          <ListItem disableGutters key=\"owner\">\n            <ListItemButton\n              onClick={() => {\n                navigate('../owners/create', {\n                  relative: 'path',\n                  state: { from: location },\n                  replace: false,\n                });\n              }}\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <Person4Icon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Owner\" />\n            </ListItemButton>\n          </ListItem>\n          <ListItem disableGutters key=\"ownerDriver\">\n            <ListItemButton\n              onClick={() => {\n                navigate('../ownersDrivers/create', {\n                  relative: 'path',\n                  state: { from: location },\n                  replace: false,\n                });\n              }}\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <Person4Icon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Owner-Driver\" />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n      <Loader visible={isLoading} />\n    </Toolbar>\n  );\n}\n\nexport default function EnhancedTable() {\n  const [order, setOrder] = React.useState<Order | undefined>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof Owner | undefined>(\n    'fullName',\n  );\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\n  const tableContainerRef = React.useRef(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const setSnackbarMessage = useSnackbar();\n\n  const {\n    isLoading,\n    isFetching,\n    data: { items, total } = { items: [], total: 0 },\n  } = useQuery({\n    queryKey: ['owners', page, rowsPerPage, orderBy, order, queryParams],\n    queryFn: OwnersQuery,\n    keepPreviousData: true,\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n  const rows = items || [];\n\n  React.useEffect(() => {\n    if (tableContainerRef.current) {\n      const container = tableContainerRef.current as HTMLElement;\n      container.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n  }, [rows]);\n\n  React.useEffect(() => {\n    const newSelected: string[] = [];\n    selected.forEach((selectedItem) => {\n      const selectedRow = rows.find((row) => row.id === selectedItem);\n      if (selectedRow) {\n        newSelected.push(selectedItem);\n      }\n    });\n    setSelected(newSelected);\n  }, [rows]);\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof Owner,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    const isDesc = orderBy === property && order === 'desc';\n    if (isDesc) {\n      setOrder(undefined);\n      setOrderBy(undefined);\n    } else {\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    }\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelected = rows.map((n: Owner) => n.id);\n      setSelected(newSelected);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (\n    event: React.MouseEvent<unknown>,\n    item: (typeof rows)[number],\n  ) => {\n    navigate(`../${getPath(item)}/view/${item.id}`, {\n      relative: 'path',\n      state: { from: location },\n      replace: false,\n    });\n  };\n\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\n    event.stopPropagation();\n    const selectedIndex = selected.indexOf(name);\n    let newSelected: readonly string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n  return (\n    <Box sx={{ width: '100%', height: '100%' }}>\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\n        <EnhancedTableToolbar\n          selected={selected}\n          setQueryParams={(query) => {\n            setQueryParams(query);\n            setPage(0);\n          }}\n        />\n        <TableContainer\n          ref={tableContainerRef}\n          sx={{ height: 'calc(100% - 115px)' }}\n        >\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size=\"small\"\n            stickyHeader\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows.map((row, index) => {\n                const isItemSelected = isSelected(`${row.id}`);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    onClick={(event) => handleClick(event, row)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <StyledTableCell padding=\"checkbox\">\n                      <Checkbox\n                        id={`${labelId}`}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\n                      />\n                    </StyledTableCell>\n                    {headCells.map((cell) => {\n                      const cellData = cell.getData(row);\n                      return (\n                        <StyledTableCell\n                          key={cell.id}\n                          title={cellData.title}\n                          align={cell.numeric ? 'right' : 'center'}\n                        >\n                          {cellData.data}\n                        </StyledTableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <Loader visible={isLoading || isFetching} />\n    </Box>\n  );\n}\n"],"names":["headCells","id","orderField","getData","row","data","concat","fullName","numeric","disablePadding","label","type","getType","title","_jsx","children","firstRow","phone","secondRow","phone2","_jsxs","href","target","onClick","stopPropagation","undefined","email","address","ownTrucks","length","trucks","map","truck","index","truckNumber","join","coordinators","drivers","_row$coordinators","_row$drivers","items","Map","forEach","coordinator","set","driver","has","persons","Array","from","values","person","getPath","StyledTableHead","styled","TableHead","_ref","backgroundColor","theme","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","whiteSpace","textOverflow","overflow","e","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","name","color","indeterminate","checked","onChange","inputProps","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","_React$useState","React","_React$useState2","_slicedToArray","createDialogOpen","setCreateDialogOpen","_React$useState3","_React$useState4","fullNameSearch","setFullNameSearch","_React$useState5","_React$useState6","truckNumberSearch","setTruckNumberSearch","_React$useState7","_React$useState8","searchChanged","setSearchChanged","location","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","_useMutation","useMutation","OwnerDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","mutate","isLoading","Toolbar","_objectSpread","pl","sm","pr","xs","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","m","width","TextField","value","size","Number","isFinite","Tooltip","IconButton","FilterListOffIcon","disabled","queryParams","FilterListIcon","p","display","AddIcon","relative","state","replace","EditIcon","DeleteIcon","Dialog","onClose","open","DialogTitle","List","pt","ListItem","disableGutters","ListItemButton","ListItemAvatar","Avatar","Person4Icon","ListItemText","Loader","visible","EnhancedTable","_React$useState9","_React$useState10","setOrder","_React$useState11","_React$useState12","setOrderBy","_React$useState13","_React$useState14","setSelected","_React$useState15","_React$useState16","page","setPage","_React$useState17","_React$useState18","rowsPerPage","setRowsPerPage","_React$useState19","_React$useState20","tableContainerRef","_useQuery","useQuery","queryKey","queryFn","OwnersQuery","keepPreviousData","isFetching","_useQuery$data","_useQuery$data2","total","rows","current","scrollTo","top","left","behavior","newSelected","selectedItem","find","push","height","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","n","isAsc","TableBody","isItemSelected","indexOf","labelId","hover","item","role","tabIndex","cursor","selectedIndex","slice","handleSelect","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"sourceRoot":""}