{"version":3,"file":"static/js/2018.64c7dce3.chunk.js","mappings":"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","sources":["loads/editLoad.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport LocalShippingIcon from '@mui/icons-material/LocalShipping';\r\nimport FactoryIcon from '@mui/icons-material/Factory';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\n\r\nimport StopsForm from './stops';\r\n\r\nimport {\r\n  Loader,\r\n  SearchField,\r\n  SearchMultiField,\r\n  SelectMultiField,\r\n  TextField,\r\n  SelectField,\r\n  FileList,\r\n} from '../components';\r\n\r\nimport {\r\n  LoadUpdate,\r\n  LoadQuery,\r\n  UsersQuery,\r\n  TrucksQuery,\r\n  CustomersQuery,\r\n} from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport {\r\n  UpdateLoad,\r\n  TruckTypes,\r\n  User,\r\n  Truck,\r\n  LoadStatuses,\r\n  LoadStatus,\r\n  Customer,\r\n  StopType,\r\n  UnitsOfWeight,\r\n  UnitsOfLength,\r\n  TimeFrameType,\r\n  FormOnClose,\r\n} from '../utils/dataTypes';\r\nimport { cleanObject } from '../utils/queryHelpers';\r\n\r\nconst timeFramePickUpValidation = yup.object({\r\n  type: yup\r\n    .string()\r\n    .oneOf([TimeFrameType.FCFS, TimeFrameType.ASAP, TimeFrameType.APPT])\r\n    .required('Type is required'),\r\n  at: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) === TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('At is required');\r\n  }),\r\n  from: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) !== TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('From is required');\r\n  }),\r\n  to: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) !== TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('To is required');\r\n  }),\r\n});\r\n\r\nconst timeFrameDeliveryValidation = yup.object({\r\n  type: yup\r\n    .string()\r\n    .oneOf([TimeFrameType.FCFS, TimeFrameType.Direct, TimeFrameType.APPT])\r\n    .required('Type is required'),\r\n  at: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) === TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('At is required');\r\n  }),\r\n  from: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) !== TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('From is required');\r\n  }),\r\n  to: yup.date().when(['type'], (type, schema) => {\r\n    return (type[0] as unknown as TimeFrameType) !== TimeFrameType.FCFS\r\n      ? schema.oneOf([undefined])\r\n      : schema.required('To is required');\r\n  }),\r\n});\r\n\r\nconst freightValidationSchema = yup.object({\r\n  pieces: yup.number().integer().min(1).required('Pieces must be at least 1'),\r\n  unitOfWeight: yup\r\n    .string()\r\n    .oneOf(UnitsOfWeight)\r\n    .required('Unit of weight is required'),\r\n  weight: yup.number().moreThan(0).required('Weight is required'),\r\n  unitOfLength: yup\r\n    .string()\r\n    .oneOf(UnitsOfLength)\r\n    .required('Unit of length is required'),\r\n  length: yup.number().moreThan(0).required('Length is required'),\r\n});\r\n\r\nconst stopPickUpValidationSchema = yup.object({\r\n  facility: yup\r\n    .object({ id: yup.string().required() })\r\n    .typeError('Enter correct facility')\r\n    .required('Facility is required'),\r\n  timeFrame: timeFramePickUpValidation.required('Time frame is required'),\r\n  freightList: yup\r\n    .array()\r\n    .of(freightValidationSchema.required('Freight is required'))\r\n    .required('Stop pickup must contain al least one freight'),\r\n  addInfo: yup.string(),\r\n});\r\n\r\nconst stopDeliveryValidationSchema = yup.object({\r\n  facility: yup\r\n    .object({ id: yup.string().required() })\r\n    .typeError('Enter correct facility')\r\n    .required('Facility is required'),\r\n  timeFrame: timeFrameDeliveryValidation.required('Time frame is required'),\r\n  addInfo: yup.string(),\r\n});\r\n\r\nconst validationSchema = yup.object({\r\n  status: yup.string().oneOf(LoadStatuses).required('Status is required'),\r\n  ref: yup\r\n    .array()\r\n    .of(yup.string().required('Ref must not be empty'))\r\n    .min(1, 'REF is required')\r\n    .max(3, 'REF must contain not more then 3 items')\r\n    .required('REF is required'),\r\n  stops: yup\r\n    .array()\r\n    .of(\r\n      yup.lazy((val) => {\r\n        switch (val.type) {\r\n          case StopType.PickUp:\r\n            return stopPickUpValidationSchema.required(\r\n              'Stop pickup is required',\r\n            );\r\n          case StopType.Delivery:\r\n            return stopDeliveryValidationSchema.required(\r\n              'Stop delivery is required',\r\n            );\r\n          default:\r\n            return yup\r\n              .mixed()\r\n              .oneOf([undefined])\r\n              .required('Type of stop must be \"Pick Up\" or \"Delivery\"');\r\n        }\r\n      }),\r\n    )\r\n    .min(2)\r\n    .required('Stops are required'),\r\n  weight: yup.string().required('Weight is required'),\r\n  truckType: yup\r\n    .array(yup.string().oneOf(TruckTypes))\r\n    .min(1, 'Select at list one')\r\n    .required('Truck Type is required'),\r\n  rate: yup.number().typeError('Rate must be a number'),\r\n  totalCharges: yup\r\n    .number()\r\n    .typeError('Total charges must be a number')\r\n    .required('Total charges is required'),\r\n  currency: yup.string().required('Currency is required'),\r\n  bookedByUser: yup\r\n    .object({ id: yup.string().required() })\r\n    // .typeError('Enter correct user')\r\n    .required('Booked by is required'),\r\n  bookedByCompany: yup.string(),\r\n  assignTo: yup\r\n    .array(\r\n      yup\r\n        .object({ id: yup.string().required() })\r\n        .typeError('Enter correct user'),\r\n    )\r\n    .min(1, 'Assign To is required')\r\n    .required('Assign To is required'),\r\n  checkInAs: yup.string(),\r\n  truck: yup\r\n    .object({ id: yup.string().required() })\r\n    .typeError('Enter correct truck')\r\n    .nullable(),\r\n  bookedWith: yup\r\n    .object({ id: yup.string().required() })\r\n    .typeError('Enter correct customer')\r\n    .required('Booked with is required'),\r\n});\r\n\r\nconst startValues = {\r\n  id: '',\r\n  status: 'Available' as LoadStatus,\r\n  ref: [],\r\n  stops: [],\r\n  weight: undefined,\r\n  truckType: [],\r\n  rate: undefined,\r\n  totalCharges: undefined,\r\n  currency: 'USD',\r\n  bookedByUser: null,\r\n  bookedByCompany: undefined,\r\n  assignTo: [],\r\n  checkInAs: '4ULogistics',\r\n  truck: null,\r\n  bookedWith: null,\r\n};\r\n\r\nexport default function EditLoadForm({\r\n  id,\r\n  onClose,\r\n}: {\r\n  id: string;\r\n  onClose: FormOnClose;\r\n}) {\r\n  const [initialValues, setInitialValues] =\r\n    React.useState<UpdateLoad>(startValues); // ToDo do like this in all forms (edit and view)\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading: loading,\r\n    isFetching: fetching,\r\n    data,\r\n  } = useQuery({\r\n    queryKey: ['load', id],\r\n    queryFn: LoadQuery,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const { mutate, isLoading } = useMutation(LoadUpdate, {\r\n    onSuccess: (data) => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Saved',\r\n      });\r\n      queryClient.invalidateQueries(['load', id]);\r\n      queryClient.invalidateQueries(['loads']);\r\n      onClose('Save', data);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const formik = useFormik<UpdateLoad>({\r\n    initialValues,\r\n    enableReinitialize: true,\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      mutate(values);\r\n    },\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    setInitialValues({\r\n      ...initialValues,\r\n      ...cleanObject(data, Object.keys(initialValues)),\r\n    });\r\n  }, [data]);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    console.error(formik.errors);\r\n    formik.handleSubmit(e);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose('Close');\r\n  };\r\n\r\n  const handleReset = (e: any) => {\r\n    formik.handleReset(e);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ height: '100%' }}>\r\n      <form\r\n        onSubmit={formik.handleSubmit}\r\n        onReset={formik.handleReset}\r\n        style={{ height: '100%' }}\r\n      >\r\n        <Box sx={{ p: 3, height: '100%' }}>\r\n          <Divider />\r\n          <Box\r\n            key=\"controls\"\r\n            sx={{\r\n              maxHeight: 'calc(100% - 70px)',\r\n              overflowX: 'hidden',\r\n              overflowY: 'scroll',\r\n            }}\r\n          >\r\n            <Box key=\"topControls\" sx={{ marginBottom: -1, p: 1 }}>\r\n              <SelectField\r\n                fieldName=\"status\"\r\n                label=\"Status\"\r\n                items={LoadStatuses}\r\n                /*disabledItems={LoadStatuses.filter(\r\n                (status) =>\r\n                  status !== 'Available' && status !== 'Not Available',\r\n              )}*/\r\n                formik={formik}\r\n              />\r\n              <TextField\r\n                fieldName=\"ref\"\r\n                label=\"REF\"\r\n                multiline\r\n                maxRows={3}\r\n                formik={formik}\r\n              />\r\n              <StopsForm fieldName=\"stops\" formik={formik} />\r\n            </Box>\r\n            <Box\r\n              key=\"centerControls\"\r\n              sx={{ display: 'inline-flex', width: '100%' }}\r\n            >\r\n              <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\r\n                <TextField fieldName=\"weight\" label=\"Weight\" formik={formik} />\r\n                <SelectMultiField\r\n                  fieldName=\"truckType\"\r\n                  label=\"Truck Type\"\r\n                  items={TruckTypes}\r\n                  formik={formik}\r\n                />\r\n                <SearchField<User>\r\n                  fieldName=\"bookedByUser\"\r\n                  label=\"Booked By\"\r\n                  getSelectedLabel={(selectedItem) =>\r\n                    `${selectedItem.fullName}`\r\n                  }\r\n                  getItemLabel={(item) => `${item.fullName}`}\r\n                  getItemSecondLabel={(item) => `${item.jobTitle}`}\r\n                  ListIcon={PersonIcon}\r\n                  entityType=\"User\"\r\n                  queryFn={UsersQuery}\r\n                  orderby=\"fullName\"\r\n                  order=\"asc\"\r\n                  formik={formik}\r\n                />\r\n                <SearchField<Customer>\r\n                  fieldName=\"bookedWith\"\r\n                  label=\"Booked With\"\r\n                  getSelectedLabel={(selectedItem) => `${selectedItem.name}`}\r\n                  getItemLabel={(item) => `${item.name}`}\r\n                  getItemSecondLabel={(item) => `${item.type}`}\r\n                  ListIcon={FactoryIcon}\r\n                  entityType=\"Customer\"\r\n                  queryFn={CustomersQuery}\r\n                  orderby=\"name\"\r\n                  order=\"asc\"\r\n                  formik={formik}\r\n                />\r\n                <SearchField<Truck>\r\n                  fieldName=\"truck\"\r\n                  label=\"Truck\"\r\n                  getSelectedLabel={(selectedItem) =>\r\n                    `${selectedItem.truckNumber}`\r\n                  }\r\n                  getItemLabel={(item) => `${item.truckNumber}`}\r\n                  getItemSecondLabel={(item) =>\r\n                    `${item.status}, ${item.licencePlate}`\r\n                  }\r\n                  ListIcon={LocalShippingIcon}\r\n                  entityType=\"Truck\"\r\n                  queryFn={TrucksQuery}\r\n                  orderby=\"truckNumber\"\r\n                  order=\"asc\"\r\n                  formik={formik}\r\n                />\r\n              </Box>\r\n              <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\r\n                <TextField\r\n                  fieldName=\"rate\"\r\n                  label=\"Rate\"\r\n                  number\r\n                  formik={formik}\r\n                />\r\n                <TextField\r\n                  fieldName=\"totalCharges\"\r\n                  label=\"Total Charges\"\r\n                  placeholder=\"Enter total rate\"\r\n                  number\r\n                  formik={formik}\r\n                />\r\n                <TextField\r\n                  fieldName=\"currency\"\r\n                  label=\"Currency\"\r\n                  formik={formik}\r\n                />\r\n                <TextField\r\n                  fieldName=\"checkInAs\"\r\n                  label=\"Check In As\"\r\n                  formik={formik}\r\n                />\r\n                <TextField\r\n                  fieldName=\"bookedByCompany\"\r\n                  label=\"Booked By Company\"\r\n                  formik={formik}\r\n                />\r\n              </Box>\r\n            </Box>\r\n            <Box\r\n              key=\"bottomControls\"\r\n              sx={{ p: 1, paddingBottom: 0, paddingTop: 0 }}\r\n            >\r\n              <SearchMultiField<User>\r\n                fieldName=\"assignTo\"\r\n                label=\"Assign To\"\r\n                getSelectedLabel={(selectedItem) => `${selectedItem.fullName}`}\r\n                getItemLabel={(item) => `${item.fullName}`}\r\n                getItemSecondLabel={(item) => `${item.jobTitle}`}\r\n                ListIcon={PersonIcon}\r\n                queryFn={UsersQuery}\r\n                orderby=\"fullName\"\r\n                order=\"asc\"\r\n                formik={formik}\r\n              />\r\n              <Box key=\"spacerRate\" sx={{ paddingBottom: 2, paddingTop: 2 }} />\r\n              <FileList\r\n                objectId={data?.id}\r\n                objectType=\"Load\"\r\n                label=\"Rate Files\"\r\n                tags={{ [`${data?.id}`]: 'Rate' }}\r\n              />\r\n              <Box key=\"spacerBill\" sx={{ paddingBottom: 2, paddingTop: 2 }} />\r\n              <FileList\r\n                objectId={data?.id}\r\n                objectType=\"Load\"\r\n                label=\"Bill Files\"\r\n                tags={{ [`${data?.id}`]: 'Bill' }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          <Divider />\r\n          <Box key=\"buttons\" sx={{ paddingTop: 3, display: 'flex' }}>\r\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Box>\r\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </form>\r\n      <Loader visible={isLoading || loading || fetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["timeFramePickUpValidation","yup","type","oneOf","TimeFrameType","FCFS","ASAP","APPT","required","at","when","schema","undefined","from","to","timeFrameDeliveryValidation","Direct","freightValidationSchema","pieces","integer","min","unitOfWeight","UnitsOfWeight","weight","moreThan","unitOfLength","UnitsOfLength","length","stopPickUpValidationSchema","facility","id","typeError","timeFrame","freightList","of","addInfo","stopDeliveryValidationSchema","validationSchema","status","LoadStatuses","ref","max","stops","val","StopType","PickUp","Delivery","truckType","TruckTypes","rate","totalCharges","currency","bookedByUser","bookedByCompany","assignTo","checkInAs","truck","nullable","bookedWith","startValues","EditLoadForm","_ref","onClose","initialValues","setInitialValues","React","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","isLoading","loading","isFetching","fetching","data","useQuery","queryKey","queryFn","LoadQuery","retry","onError","error","severity","message","Error","JSON","stringify","mutate","useMutation","LoadUpdate","onSuccess","invalidateQueries","formik","useFormik","enableReinitialize","onSubmit","values","cleanObject","Object","keys","_jsxs","Box","sx","height","children","_jsx","handleSubmit","onReset","handleReset","style","p","Divider","maxHeight","overflowX","overflowY","marginBottom","SelectField","fieldName","label","items","TextField","multiline","maxRows","StopsForm","display","width","SelectMultiField","SearchField","getSelectedLabel","selectedItem","concat","fullName","getItemLabel","item","getItemSecondLabel","jobTitle","ListIcon","PersonIcon","entityType","UsersQuery","orderby","order","name","FactoryIcon","CustomersQuery","truckNumber","licencePlate","LocalShippingIcon","TrucksQuery","number","placeholder","paddingBottom","paddingTop","SearchMultiField","FileList","objectId","objectType","tags","Button","fullWidth","variant","size","color","disabled","dirty","onClick","handleClose","Loader","visible"],"sourceRoot":""}