{"version":3,"file":"static/js/491.962caaf1.chunk.js","mappings":"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","sources":["trucksNearby/trucksNearby.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { debounce } from '@mui/material/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { LocationsQuery, TrucksQuery, TruckDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Truck, Location, Result } from '../utils/dataTypes';\r\nimport { getPath, getType, modifyedQueryFn } from '../utils/queryHelpers';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Truck;\r\n  getData: (row: Truck) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'truckNumber',\r\n    orderField: 'truckNumber',\r\n    getData: (row) => ({ data: `${row.truckNumber}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Truck Number',\r\n  },\r\n  {\r\n    id: 'mainContactInfo',\r\n    getData: (row) => {\r\n      const person = row.coordinator || row.owner;\r\n      let path = '';\r\n      let type = '';\r\n      let firstRow = '';\r\n      let secondRow = '';\r\n      if (person) {\r\n        path = `./${getPath(person)}/view/${person.id}`;\r\n        type = `${getType(person)} `;\r\n        firstRow = `${person.fullName}`;\r\n        secondRow = `${person?.phone}`;\r\n      }\r\n      return {\r\n        data: (\r\n          <span>\r\n            <b>{type}</b>\r\n            <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n              {firstRow}\r\n            </a>\r\n            <br />\r\n            <a\r\n              href={secondRow ? `tel:${secondRow}` : undefined}\r\n              target=\"_blank\"\r\n              onClick={stopPropagation}\r\n            >\r\n              {secondRow || ' '}\r\n            </a>\r\n          </span>\r\n        ),\r\n        title: type + '' + firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Main Contact info',\r\n  },\r\n  {\r\n    id: 'truckInfo',\r\n    getData: (row) => {\r\n      const firstRow = row.type ? `${row.type}` : '';\r\n      const secondRow = row.equipment ? `${row.equipment.join(', ')}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Truck info',\r\n  },\r\n  {\r\n    id: 'payload',\r\n    getData: (row) => {\r\n      const firstRow = row.grossWeight ? `${row.grossWeight}` : '';\r\n      const secondRow = row.payload ? `${row.payload}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Weight/Payload',\r\n  },\r\n  {\r\n    id: 'dims',\r\n    getData: (row) => {\r\n      const firstRow = row.insideDims ? `${row.insideDims}` : '';\r\n      const secondRow = row.doorDims ? `${row.doorDims}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Inside/Door DIMS',\r\n  },\r\n  {\r\n    id: 'status',\r\n    orderField: 'status',\r\n    getData: (row) => ({ data: `${row.status}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Status',\r\n  },\r\n  {\r\n    id: 'roadsDistance',\r\n    getData: (row) => ({\r\n      data: `${row.milesByRoads ? row.milesByRoads.toFixed(2) : ''}`,\r\n    }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Road distance',\r\n  },\r\n  {\r\n    id: 'location',\r\n    getData: (row) => {\r\n      if (row?.lastCity) {\r\n        const path = `./locations/view/${row.lastCity.id}`;\r\n        const firstRow = `${row.lastCity.name}, ${row.lastCity.stateCode}, ${row.lastCity.zipCode},`;\r\n        const secondRow = `${\r\n          row.locationUpdatedAt\r\n            ? new Date(row.locationUpdatedAt).toLocaleString()\r\n            : ''\r\n        }`;\r\n\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {firstRow}\r\n              </a>\r\n              <br />\r\n              {secondRow}\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      } else {\r\n        return { data: '' };\r\n      }\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Last known location',\r\n  },\r\n  {\r\n    id: 'calcDistance',\r\n    getData: (row) => ({\r\n      data: `${row.milesHaversine ? row.milesHaversine.toFixed(2) : ''}`,\r\n    }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Origin away',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Truck,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Truck) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell align=\"center\" padding=\"checkbox\">\r\n          Actions\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<\r\n    React.SetStateAction<Record<string, number | string>>\r\n  >;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [locationValue, setLocationValue] = React.useState<Location | null>(\r\n    null,\r\n  );\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [locationsQueryParams, setLocationsQueryParams] = React.useState<{\r\n    search?: any;\r\n  }>({});\r\n  const [options, setOptions] = React.useState<readonly Location[]>([]);\r\n  const [distanceValue, setDistanceValue] = React.useState(200);\r\n  const [searchDataChanged, setSearchDataChanged] =\r\n    React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(TruckDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['trucks']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const setSearch = React.useMemo(() => {\r\n    return debounce((search: string): void => {\r\n      setLocationsQueryParams({ search });\r\n    }, 400);\r\n  }, []);\r\n  const { data: { items } = { items: [], total: 0 } } = useQuery<\r\n    Result<Location>,\r\n    Error,\r\n    Result<Location>,\r\n    any // ToDo fix type\r\n  >({\r\n    queryKey: ['locations', 0, 15, 'name', 'asc', locationsQueryParams],\r\n    queryFn: modifyedQueryFn(LocationsQuery, true),\r\n    keepPreviousData: true,\r\n    retry: false,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (locationValue) {\r\n      const notSelectedItems = items.filter(\r\n        (item) => item.id !== locationValue.id,\r\n      );\r\n      setOptions([locationValue, ...notSelectedItems]);\r\n    } else {\r\n      if (inputValue === '') {\r\n        setOptions([]);\r\n      } else {\r\n        setOptions([...items]);\r\n      }\r\n    }\r\n  }, [locationValue, items]);\r\n\r\n  const handleLocationChange = (event: any, newValue: Location | null) => {\r\n    setLocationValue(newValue);\r\n    if (newValue?.location) {\r\n      setQueryParams({\r\n        lastLocation: newValue.location.join(','),\r\n        distance: distanceValue,\r\n      });\r\n      setSearchDataChanged(false);\r\n    } else if (!newValue) {\r\n      setInputValue('');\r\n      setQueryParams({});\r\n      setSearchDataChanged(false);\r\n    }\r\n    // setSearchDataChanged(true);\r\n  };\r\n  const handleLocationInputChange = (event: any, newInputValue: string) => {\r\n    setInputValue(newInputValue);\r\n    setSearch(newInputValue);\r\n  };\r\n  const handleDistanceInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (Number.isInteger(Number(event.target.value))) {\r\n      setDistanceValue(Number(event.target.value));\r\n      if (locationValue?.location) {\r\n        setQueryParams({\r\n          lastLocation: locationValue.location.join(','),\r\n          distance: Number(event.target.value),\r\n        });\r\n        setSearchDataChanged(false);\r\n      }\r\n      // setSearchDataChanged(true);\r\n    }\r\n  };\r\n  const handleClearFilter = () => {\r\n    setLocationValue(null);\r\n    setInputValue('');\r\n    setDistanceValue(200);\r\n    setQueryParams({});\r\n    setSearchDataChanged(false);\r\n  };\r\n  const handleApplyFilter = () => {\r\n    if (locationValue?.location) {\r\n      setQueryParams({\r\n        lastLocation: locationValue.location.join(','),\r\n        distance: distanceValue,\r\n      });\r\n    } else {\r\n      setQueryParams({});\r\n    }\r\n    setSearchDataChanged(false);\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Trucks Nearby\r\n        </Typography>\r\n      )}\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '350px' },\r\n        }}\r\n      >\r\n        <Autocomplete\r\n          getOptionLabel={(option) =>\r\n            typeof option === 'string'\r\n              ? option\r\n              : `${option.name}, ${option.zipCode}, ${option.stateName}`\r\n          }\r\n          filterOptions={(x) => x}\r\n          options={options}\r\n          autoComplete\r\n          includeInputInList\r\n          filterSelectedOptions={false}\r\n          value={locationValue}\r\n          noOptionsText=\"No locations\"\r\n          onChange={handleLocationChange}\r\n          onInputChange={handleLocationInputChange}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Enter city, state or zip\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          )}\r\n          renderOption={(props, option) => (\r\n            <li {...props}>\r\n              <Grid container alignItems=\"center\">\r\n                <Grid item sx={{ display: 'flex', width: 44 }}>\r\n                  <LocationOnIcon sx={{ color: 'text.secondary' }} />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}\r\n                >\r\n                  <Box component=\"span\" sx={{ fontWeight: 'regular' }}>\r\n                    {`${option.name}, ${option.stateCode}`}\r\n                  </Box>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {`${option.zipCode}, ${option.stateName}`}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </li>\r\n          )}\r\n        />\r\n      </Box>\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '140px' },\r\n        }}\r\n      >\r\n        <TextField\r\n          select\r\n          label=\"Select Distance\"\r\n          value={distanceValue}\r\n          onChange={handleDistanceInputChange}\r\n          size=\"small\"\r\n          fullWidth\r\n        >\r\n          {Array.from(\r\n            { length: (1000 - 50) / 50 + 1 },\r\n            (_, index) => 50 + index * 50,\r\n          ).map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Box>\r\n      <Tooltip title=\"Filter list\">\r\n        {(searchDataChanged || !locationValue) &&\r\n        !(searchDataChanged && !locationValue) ? (\r\n          <span>\r\n            <IconButton\r\n              disabled={!locationValue || !distanceValue}\r\n              onClick={handleApplyFilter}\r\n            >\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={handleClearFilter}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>(undefined);\r\n  const [orderBy, setOrderBy] = React.useState<keyof Truck | undefined>(\r\n    undefined,\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['trucks', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: TrucksQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Truck,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Truck) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    // const selectedIndex = selected.indexOf(name);\r\n    // let newSelected: readonly string[] = [];\r\n    //\r\n    // if (selectedIndex === -1) {\r\n    //     newSelected = newSelected.concat(selected, name);\r\n    // } else if (selectedIndex === 0) {\r\n    //     newSelected = newSelected.concat(selected.slice(1));\r\n    // } else if (selectedIndex === selected.length - 1) {\r\n    //     newSelected = newSelected.concat(selected.slice(0, -1));\r\n    // } else if (selectedIndex > 0) {\r\n    //     newSelected = newSelected.concat(\r\n    //         selected.slice(0, selectedIndex),\r\n    //         selected.slice(selectedIndex + 1),\r\n    //     );\r\n    // }\r\n    //\r\n    // setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Button\r\n                        id={`${labelId}`}\r\n                        sx={{ m: 1 }}\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                          return;\r\n                        }}\r\n                      >\r\n                        Reserve\r\n                      </Button>\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["headCells","id","orderField","getData","row","data","concat","truckNumber","numeric","disablePadding","label","person","coordinator","owner","path","type","firstRow","secondRow","getPath","getType","fullName","phone","_jsxs","children","_jsx","href","target","onClick","stopPropagation","undefined","title","equipment","join","grossWeight","payload","insideDims","doorDims","status","milesByRoads","toFixed","lastCity","name","stateCode","zipCode","locationUpdatedAt","Date","toLocaleString","milesHaversine","StyledTableHead","styled","TableHead","_ref","backgroundColor","theme","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","onRequestSort","numSelected","rowCount","TableRow","align","padding","map","headCell","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","_React$useState","React","_React$useState2","_slicedToArray","locationValue","setLocationValue","_React$useState3","_React$useState4","inputValue","setInputValue","_React$useState5","_React$useState6","locationsQueryParams","setLocationsQueryParams","_React$useState7","_React$useState8","options","setOptions","_React$useState9","_React$useState10","distanceValue","setDistanceValue","_React$useState11","_React$useState12","searchDataChanged","setSearchDataChanged","queryClient","useLocation","useNavigate","useQueryClient","setSnackbarMessage","useSnackbar","_useMutation","useMutation","TruckDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","isLoading","mutate","setSearch","debounce","search","_useQuery$data","useQuery","queryKey","queryFn","modifyedQueryFn","LocationsQuery","keepPreviousData","retry","items","total","notSelectedItems","filter","item","_toConsumableArray","Toolbar","_objectSpread","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","color","variant","m","width","Autocomplete","getOptionLabel","option","stateName","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","value","noOptionsText","onChange","newValue","location","lastLocation","distance","onInputChange","newInputValue","renderInput","params","TextField","size","fullWidth","renderOption","Grid","container","alignItems","display","LocationOnIcon","wordWrap","fontWeight","select","Number","isInteger","Array","from","_","index","MenuItem","Tooltip","IconButton","FilterListOffIcon","disabled","FilterListIcon","Loader","visible","EnhancedTable","_React$useState13","_React$useState14","setOrder","_React$useState15","_React$useState16","setOrderBy","_React$useState17","_React$useState18","setSelected","_React$useState19","_React$useState20","page","setPage","_React$useState21","_React$useState22","rowsPerPage","setRowsPerPage","_React$useState23","_React$useState24","queryParams","tableContainerRef","navigate","_useQuery2","TrucksQuery","isFetching","_useQuery2$data","_useQuery2$data2","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","height","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","checked","n","isAsc","TableBody","isItemSelected","indexOf","labelId","hover","relative","state","replace","role","tabIndex","cursor","Button","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"sourceRoot":""}