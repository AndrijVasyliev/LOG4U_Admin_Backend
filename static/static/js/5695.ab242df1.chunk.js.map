{"version":3,"file":"static/js/5695.ab242df1.chunk.js","mappings":"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","sources":["customers/customers.tsx","utils/stopPropagation.ts","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/Edit.js","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { CustomersQuery, CustomerDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Customer } from '../utils/dataTypes';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Customer;\r\n  getData: (row: Customer) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'name',\r\n    orderField: 'name',\r\n    getData: (row) => ({ data: `${row.name}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Company Name',\r\n  },\r\n  {\r\n    id: 'customerType',\r\n    orderField: 'type',\r\n    getData: (row) => {\r\n      const firstRow = `${row.type}`;\r\n\r\n      return {\r\n        data: <span>{firstRow}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Type',\r\n  },\r\n  {\r\n    id: 'customerAddress',\r\n    getData: (row) => {\r\n      const firstRow = `${row.address}`;\r\n      const secondRow = `${row.address2 || ''}`;\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow || ' '}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Billing Address',\r\n  },\r\n  {\r\n    id: 'city',\r\n    orderField: 'city',\r\n    getData: (row) => ({ data: `${row.city}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'City',\r\n  },\r\n  {\r\n    id: 'state',\r\n    orderField: 'state',\r\n    getData: (row) => ({ data: `${row.state}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'State',\r\n  },\r\n  {\r\n    id: 'zipCode',\r\n    orderField: 'zipCode',\r\n    getData: (row) => ({ data: `${row.zipCode}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Zip Code',\r\n  },\r\n  {\r\n    id: 'phoneAndFax',\r\n    getData: (row) => {\r\n      const firstRow = `${row.phone}`;\r\n      const secondRow = `${row.fax ? row.fax : ''}`;\r\n      return {\r\n        data: (\r\n          <span>\r\n            <a\r\n              href={`tel:${firstRow}`}\r\n              target=\"_blank\"\r\n              onClick={stopPropagation}\r\n            >\r\n              {firstRow}\r\n            </a>\r\n            <br />\r\n            <a\r\n              href={secondRow ? `tel:${secondRow}` : undefined}\r\n              target=\"_blank\"\r\n              onClick={stopPropagation}\r\n            >\r\n              {secondRow || ' '}\r\n            </a>\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Phone/Fax',\r\n  },\r\n  {\r\n    id: 'emailAndWebsite',\r\n    getData: (row) => {\r\n      if (row.email) {\r\n        const firstRow = `${row.email}`;\r\n        const secondRow = `${row.website || ''}`;\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a\r\n                href={`mailto:${firstRow}`}\r\n                target=\"_blank\"\r\n                onClick={stopPropagation}\r\n              >\r\n                {firstRow}\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={`${secondRow}` || undefined}\r\n                target=\"_blank\"\r\n                onClick={stopPropagation}\r\n              >\r\n                {secondRow || ' '}\r\n              </a>\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      } else {\r\n        return { data: '' };\r\n      }\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Email/Website',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Customer,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Customer) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [customerSearch, setCustomerSearch] = React.useState<string>('');\r\n  const [searchChanged, setSearchChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(CustomerDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['customer']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const customerHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCustomerSearch(event.target.value);\r\n    setSearchChanged(true);\r\n  };\r\n  const filterClearHandler = () => {\r\n    setSearchChanged(false);\r\n    setCustomerSearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setSearchChanged(false);\r\n    setQueryParams({ search: customerSearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (customerSearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Customers\r\n        </Typography>\r\n      )}\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '140px' },\r\n        }}\r\n      >\r\n        <TextField\r\n          label=\"Customer Search\"\r\n          value={customerSearch}\r\n          onChange={customerHandler}\r\n          onKeyUp={keyUpHandler}\r\n          size=\"small\"\r\n        />\r\n      </Box>\r\n      <Tooltip title=\"Filter list\">\r\n        {(searchChanged || !customerSearch) &&\r\n        !(searchChanged && !customerSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!customerSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        <Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('desc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Customer | undefined>(\r\n    'name',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['customers', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: CustomersQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows: Customer[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Customer,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Customer) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function stopPropagation(e: React.SyntheticEvent) {\r\n  e.stopPropagation();\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["headCells","id","orderField","getData","row","data","concat","name","numeric","disablePadding","label","firstRow","type","_jsx","children","title","address","secondRow","address2","_jsxs","city","state","zipCode","phone","fax","href","target","onClick","stopPropagation","undefined","email","website","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","customerSearch","setCustomerSearch","React","searchChanged","setSearchChanged","location","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","mutate","isLoading","useMutation","CustomerDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","filterClearHandler","filterHandler","search","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","m","width","TextField","value","onKeyUp","key","size","Tooltip","IconButton","FilterListOffIcon","disabled","FilterListIcon","p","display","createHandler","relative","from","replace","AddIcon","editHandler","EditIcon","deleteHandler","DeleteIcon","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","CustomersQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","height","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","n","handleRequestSort","isAsc","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","selectedIndex","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","e","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","jsx","d","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","notifyOptions","listeners","getCurrentResult","currentResult","variables","mutateOptions","build","addObserver","execute","getDefaultState","result","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","listener","arg1","arg2","arg3","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop"],"sourceRoot":""}