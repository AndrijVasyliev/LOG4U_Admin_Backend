{"version":3,"file":"static/js/4126.4fce6e52.chunk.js","mappings":"yUAgBMA,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,6BAC5BC,QAASH,EAAAA,KAAaE,SAAS,uBAC/BE,SAAUJ,EAAAA,KACVK,iBAAkBL,EAAAA,GACT,CACLA,EAAAA,KAEGM,UAAU,wBACVC,KAAK,GAAI,8CACTC,IAAI,GAAI,2CACRN,SAAS,sDACZF,EAAAA,KAEGM,UAAU,yBACVC,KAAK,IAAK,gDACVC,IAAI,IAAK,6CACTN,SAAS,wDAEbA,SAAS,0BAGRO,EAAgB,CACpBC,GAAI,GACJT,UAAMU,EACNR,aAASQ,EACTP,cAAUO,EACVN,sBAAkBM,GAGL,SAASC,IACtB,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,MACdC,GAAqBC,EAAAA,EAAAA,MAE3BC,GAIIC,EAAAA,EAAAA,GAAS,CACXC,SAAU,CAAC,WAAYV,EAASW,MAAM,KAAK,IAC3CC,QAASC,EAAAA,GACTC,kBAAkB,EAClBC,OAAO,EACPC,QAAS,SAACC,GACRX,EAAmB,CACjBY,SAAU,QACVC,QAASF,aAAiBG,MAAQH,EAAME,QAAUE,KAAKC,UAAUL,IAErE,IAbWM,EAAOf,EAAlBgB,UACYC,EAAQjB,EAApBkB,WACAC,EAAInB,EAAJmB,KAcFC,GAA8BC,EAAAA,EAAAA,GAAYC,EAAAA,GAAgB,CACxDC,UAAW,WACTzB,EAAmB,CACjBY,SAAU,UACVC,QAAS,UAEXf,EAAY4B,kBAAkB,CAAC,eAC/B9B,GAAU,EACZ,EACAc,QAAS,SAACC,GACRX,EAAmB,CACjBY,SAAU,QACVC,QAASF,aAAiBG,MAAQH,EAAME,QAAUE,KAAKC,UAAUL,IAErE,IAdMgB,EAAML,EAANK,OAAQT,EAASI,EAATJ,UAiBVU,GAASC,EAAAA,EAAAA,IAA0B,CACvCvC,eAAawC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACRxC,IACAyC,EAAAA,EAAAA,IAAYV,EAAMW,OAAOC,KAAK3C,KAEnC4C,oBAAoB,EACpBtD,iBAAkBA,EAClBuD,SAAU,SAACC,GACTT,EAAOS,EACT,IAOF,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFC,EAAAA,EAAAA,KAAA,QAAML,SAAUP,EAAOa,aAAcC,QAASd,EAAOe,YAAYJ,UAC/DF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACM,GAAI,CAAEC,EAAG,EAAGC,QAAS,QAASP,SAAA,EACjCF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAgBM,GAAI,CAAEE,QAAS,eAAgBP,SAAA,EACjDF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAYM,GAAI,CAAEC,EAAG,EAAGE,MAAO,OAAQR,SAAA,EACzCC,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CACRC,UAAU,OACVC,MAAM,gBACNtB,OAAQA,KAEVY,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CACRC,UAAU,UACVC,MAAM,iBACNtB,OAAQA,MATH,SAYTS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAaM,GAAI,CAAEC,EAAG,EAAGE,MAAO,OAAQR,SAAA,EAC1CC,EAAAA,EAAAA,KAACW,EAAAA,GAAmB,CAClBF,UAAU,mBACVC,MAAM,WACNtB,OAAQA,KAEVY,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CACRC,UAAU,WACVC,MAAM,iBACNtB,OAAQA,MATH,WAbF,aA0BTS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAeM,GAAI,CAAEE,QAAS,eAAgBP,SAAA,EAChDC,EAAAA,EAAAA,KAACF,EAAAA,EAAG,CAAYM,GAAI,CAAEC,EAAG,EAAGO,WAAY,EAAGL,MAAO,OAAQR,UACxDC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLC,WAAS,EACTC,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,KAAK,SACLC,UAAW/B,EAAOgC,MAAMrB,SACzB,UARM,SAYTC,EAAAA,EAAAA,KAACF,EAAAA,EAAG,CAAaM,GAAI,CAAEC,EAAG,EAAGO,WAAY,EAAGL,MAAO,OAAQR,UACzDC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLC,WAAS,EACTC,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,KAAK,SACLG,QAtDM,WAClBjE,GAAU,EACZ,EAoDmC2C,SACtB,YARM,WAbF,iBA4BbC,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CAACC,QAAS7C,GAAaD,GAAWE,MAG/C,C","sources":["facilities/editFacility.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { Loader, TextField, SearchLocationField } from '../components';\r\n\r\nimport { FacilityUpdate, FacilityQuery } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { UpdateFacility, GeoPoint } from '../utils/dataTypes';\r\nimport { cleanObject } from '../utils/queryHelpers';\r\n\r\nconst validationSchema = yup.object({\r\n  name: yup.string().required('Facility name is required'),\r\n  address: yup.string().required('Address is required'),\r\n  address2: yup.string(),\r\n  facilityLocation: yup\r\n    .tuple([\r\n      yup\r\n        .number()\r\n        .typeError('Latitude is required')\r\n        .min(-90, 'Latitude must be grater than or equal: -90')\r\n        .max(90, 'Latitude must be less than or equal: 90')\r\n        .required('Location should be in format \"latitude, longitude\"'),\r\n      yup\r\n        .number()\r\n        .typeError('Longitude is required')\r\n        .min(-180, 'Longitude must be grater than or equal: -180')\r\n        .max(180, 'Longitude must be less than or equal: 180')\r\n        .required('Location should be in format \"latitude, longitude\"'),\r\n    ])\r\n    .required('Location is required'),\r\n});\r\n\r\nconst initialValues = {\r\n  id: '',\r\n  name: undefined,\r\n  address: undefined,\r\n  address2: undefined,\r\n  facilityLocation: undefined,\r\n};\r\n\r\nexport default function EditFacilityForm() {\r\n  const { pathname } = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading: loading,\r\n    isFetching: fetching,\r\n    data,\r\n  } = useQuery({\r\n    queryKey: ['facility', pathname.split('/')[3]],\r\n    queryFn: FacilityQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const { mutate, isLoading } = useMutation(FacilityUpdate, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Saved',\r\n      });\r\n      queryClient.invalidateQueries(['facilities']);\r\n      navigate(-1);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const formik = useFormik<UpdateFacility>({\r\n    initialValues: {\r\n      ...initialValues,\r\n      ...cleanObject(data, Object.keys(initialValues)),\r\n    },\r\n    enableReinitialize: true,\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      mutate(values as unknown as UpdateFacility);\r\n    },\r\n  });\r\n\r\n  const handleClose = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\r\n        <Box sx={{ p: 3, display: 'grid' }}>\r\n          <Box key=\"controls\" sx={{ display: 'inline-flex' }}>\r\n            <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\r\n              <TextField\r\n                fieldName=\"name\"\r\n                label=\"Facility Name\"\r\n                formik={formik}\r\n              />\r\n              <TextField\r\n                fieldName=\"address\"\r\n                label=\"Address Line 1\"\r\n                formik={formik}\r\n              />\r\n            </Box>\r\n            <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\r\n              <SearchLocationField\r\n                fieldName=\"facilityLocation\"\r\n                label=\"Location\"\r\n                formik={formik}\r\n              />\r\n              <TextField\r\n                fieldName=\"address2\"\r\n                label=\"Address Line 2\"\r\n                formik={formik}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          <Box key=\"buttons\" sx={{ display: 'inline-flex' }}>\r\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Box>\r\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </form>\r\n      <Loader visible={isLoading || loading || fetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["validationSchema","yup","name","required","address","address2","facilityLocation","typeError","min","max","initialValues","id","undefined","EditFacilityForm","pathname","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","_useQuery","useQuery","queryKey","split","queryFn","FacilityQuery","keepPreviousData","retry","onError","error","severity","message","Error","JSON","stringify","loading","isLoading","fetching","isFetching","data","_useMutation","useMutation","FacilityUpdate","onSuccess","invalidateQueries","mutate","formik","useFormik","_objectSpread","cleanObject","Object","keys","enableReinitialize","onSubmit","values","_jsxs","Box","children","_jsx","handleSubmit","onReset","handleReset","sx","p","display","width","TextField","fieldName","label","SearchLocationField","paddingTop","Button","fullWidth","variant","size","color","type","disabled","dirty","onClick","Loader","visible"],"sourceRoot":""}