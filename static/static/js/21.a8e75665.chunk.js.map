{"version":3,"file":"static/js/21.a8e75665.chunk.js","mappings":"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","sources":["api/api.ts","locations/viewLocation.tsx"],"sourcesContent":["import { authProvider } from '../utils/auth';\nimport {\n  Coordinator,\n  Driver,\n  Load,\n  CreateLoad,\n  UpdateLoad,\n  Location,\n  CreateLocation,\n  UpdateLocation,\n  Owner,\n  Truck,\n  CreateTruck,\n  UpdateTruck,\n  User,\n  CreateUser,\n  UpdateUser,\n  Query,\n  QuerySingle,\n  Result,\n} from '../utils/dataTypes';\n\nconst SUCCESS_HTTP_CODE = 200;\nconst CREATED_HTTP_CODE = 201;\nconst FORBIDDEN_HTTP_CODE = 403;\nconst NOT_FOUND_HTTP_CODE = 404;\nconst CONFLICT_HTTP_CODE = 409;\n\nconst { origin } = new URL(window.location.href);\n\nconst transformBody = (body: object): Record<string, any> => {\n  const transformedBody: Record<string, any> = {};\n  Object.entries(body).forEach((entry) => {\n    if (Array.isArray(entry[1])) {\n      transformedBody[entry[0]] = entry[1].map((elem) =>\n        typeof elem === 'object' && !(elem instanceof Date) ? elem.id : elem,\n      );\n    } else if (typeof entry[1] === 'object' && !(entry[1] instanceof Date)) {\n      transformedBody[entry[0]] = entry[1] && entry[1].id;\n    } else {\n      transformedBody[entry[0]] = entry[1];\n    }\n  });\n  return transformedBody;\n};\n\nexport const authFetch: (\n  input: string | URL,\n  init?: RequestInit & { bodyObj?: object },\n) => Promise<object> = (input, init = {}) => {\n  const { bodyObj, ...restInit } = init;\n  const fetchInit = { ...restInit, headers: new Headers() };\n  fetchInit.headers.set(\n    'Authorization',\n    'Basic ' +\n      btoa(authProvider.user?.username + ':' + authProvider.user?.password),\n  );\n  if (bodyObj && typeof bodyObj === 'object') {\n    fetchInit.headers.set('Accept', 'application/json');\n    fetchInit.headers.set('Content-Type', 'application/json');\n    fetchInit.body = JSON.stringify(transformBody(bodyObj));\n  }\n  return fetch(input, fetchInit)\n    .catch((reason) => {\n      const error = new Error();\n      error.cause = reason;\n      error.name = 'Fetch error';\n      error.message = 'Network error has occurred';\n      throw error;\n    })\n    .then((response) => {\n      if (\n        response.status !== SUCCESS_HTTP_CODE &&\n        response.status !== CREATED_HTTP_CODE\n      ) {\n        const error = new Error();\n        error.cause = response;\n        if (response.status) {\n          error.name = response.status + ' ' + response.statusText;\n          switch (response.status) {\n            case FORBIDDEN_HTTP_CODE:\n              error.message = 'Insufficient permissions';\n              break;\n            case NOT_FOUND_HTTP_CODE:\n              error.message = 'Not found';\n              break;\n            case CONFLICT_HTTP_CODE:\n              error.message = 'Some field values invalidate unique constrain';\n              break;\n            default:\n              error.message = 'Some server error has occurred';\n          }\n        } else {\n          error.message = 'Network error has occurred';\n        }\n        throw error;\n      }\n      return response.json().catch((reason) => {\n        const error = new Error();\n        error.cause = reason;\n        error.name = 'Fetch error';\n        error.message = 'Server responded with incorrect data';\n        throw error;\n      });\n    });\n};\n\nexport const TrucksQuery: (\n  query: Query<{\n    search?: number;\n    truckNumber?: number;\n    lastLocation?: string;\n    distance?: string;\n  }>,\n) => Promise<Result<Truck>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/truck', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.lastLocation && queryParams?.distance) {\n    url.searchParams.append('lastLocation', `${queryParams.lastLocation}`);\n    url.searchParams.append('distance', `${queryParams.distance}`);\n  }\n  return authFetch(url) as Promise<Result<Truck>>;\n};\n\nexport const TruckDelete = (userId: string): Promise<Truck> => {\n  const url = new URL(`/truck/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Truck>;\n};\n\nexport const TruckCreate = (data: CreateTruck): Promise<Truck> => {\n  const url = new URL(`/truck`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Truck>;\n};\n\nexport const TruckUpdate = (data: UpdateTruck): Promise<Truck> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/truck/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Truck>;\n};\n\nexport const TruckQuery = (query: QuerySingle): Promise<Truck> => {\n  const url = new URL(`/truck/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Truck>;\n};\n\nexport const LocationsQuery: (\n  query: Query<{ search?: string; name?: string }>,\n) => Promise<Result<Location>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/location', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.name) {\n    url.searchParams.append('name', `${queryParams.name}`);\n  }\n  return authFetch(url) as Promise<Result<Location>>;\n};\n\nexport const LocationDelete = (userId: string): Promise<Location> => {\n  const url = new URL(`/location/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Location>;\n};\n\nexport const LocationCreate = (data: CreateLocation): Promise<Location> => {\n  const url = new URL(`/location`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Location>;\n};\n\nexport const LocationUpdate = (data: UpdateLocation): Promise<Location> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/location/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Location>;\n};\n\nexport const LocationQuery = (query: QuerySingle): Promise<Location> => {\n  const url = new URL(`/location/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Location>;\n};\n\nexport const LoadsQuery: (\n  query: Query<{ loadNumber?: number; truckNumber?: number }>,\n) => Promise<Result<Load>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/load', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.loadNumber) {\n    url.searchParams.append('loadNumber', `${queryParams.loadNumber}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Load>>;\n};\n\nexport const LoadDelete = (userId: string): Promise<Load> => {\n  const url = new URL(`/load/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Load>;\n};\n\nexport const LoadCreate = (data: CreateLoad): Promise<Load> => {\n  const url = new URL(`/load`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Load>;\n};\n\nexport const LoadUpdate = (data: UpdateLoad): Promise<Load> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/load/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Load>;\n};\n\nexport const LoadQuery = (query: QuerySingle): Promise<Load> => {\n  const url = new URL(`/load/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Load>;\n};\n\nexport const OwnersQuery: (\n  query: Query<{ search?: string; fullName?: number; truckNumber?: number }>,\n) => Promise<Result<Owner>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/owner', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Owner>>;\n};\n\nexport const OwnerDelete = (userId: string): Promise<Owner> => {\n  const url = new URL(`/owner/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Owner>;\n};\n\nexport const DriversQuery: (\n  query: Query<{ search?: string; fullName?: number; truckNumber?: number }>,\n) => Promise<Result<Driver>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/driver', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Driver>>;\n};\n\nexport const DriverDelete = (userId: string): Promise<Driver> => {\n  const url = new URL(`/driver/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Driver>;\n};\n\nexport const CoordinatorsQuery: (\n  query: Query<{ search?: string; fullName?: number; truckNumber?: number }>,\n) => Promise<Result<Coordinator>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/coordinator', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Coordinator>>;\n};\n\nexport const CoordinatorDelete = (userId: string): Promise<Coordinator> => {\n  const url = new URL(`/coordinator/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Coordinator>;\n};\n\nexport const UsersQuery: (\n  query: Query<{ search?: string; fullName?: number }>,\n) => Promise<Result<User>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/user', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  return authFetch(url) as Promise<Result<User>>;\n};\n\nexport const UserDelete = (userId: string): Promise<User> => {\n  const url = new URL(`/user/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<User>;\n};\n\nexport const UserCreate = (data: CreateUser): Promise<User> => {\n  const url = new URL(`/user`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<User>;\n};\n\nexport const UserUpdate = (data: UpdateUser): Promise<User> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/user/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<User>;\n};\n\nexport const UserQuery = (query: QuerySingle): Promise<User> => {\n  const url = new URL(`/user/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<User>;\n};\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport { useFormik } from 'formik';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nimport { Loader, LocationField, TextField } from '../components';\n\nimport { LocationQuery } from '../api';\nimport { useSnackbar } from '../hooks';\nimport { CreateLocation } from '../utils/dataTypes';\n\nconst initialValues = {\n  id: '',\n  zipCode: '',\n  name: '',\n  stateCode: '',\n  stateName: '',\n  location: [NaN, NaN] as [number, number],\n};\n\nexport default function ViewLocationForm() {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const setSnackbarMessage = useSnackbar();\n\n  const {\n    isLoading: loading,\n    isFetching: fetching,\n    data,\n  } = useQuery({\n    queryKey: ['location', pathname.split('/')[3]],\n    queryFn: LocationQuery,\n    keepPreviousData: true,\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const formik = useFormik<CreateLocation>({\n    initialValues: {\n      ...initialValues,\n      ...data,\n    },\n    enableReinitialize: true,\n    onSubmit: () => {\n      return;\n    },\n  });\n\n  const handleClose = () => {\n    navigate(-1);\n  };\n\n  const handleEdit = () => {\n    navigate(pathname.replace('view', 'edit'), { replace: true });\n  };\n\n  return (\n    <Box>\n      <form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\n        <Box sx={{ p: 3, display: 'grid' }}>\n          <Box key=\"controls\" sx={{ display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\n              <TextField\n                fieldName=\"name\"\n                label=\"Name\"\n                disabled\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"stateName\"\n                label=\"State Name\"\n                disabled\n                formik={formik}\n              />\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\n              <TextField\n                fieldName=\"zipCode\"\n                label=\"Zip Code\"\n                disabled\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"stateCode\"\n                label=\"State Code\"\n                disabled\n                formik={formik}\n              />\n            </Box>\n          </Box>\n          <Box key=\"location\" sx={{ marginTop: -2, display: 'inline-flex' }}>\n            <LocationField\n              fieldName=\"location\"\n              label={['Latitude', 'Longitude']}\n              disabled\n              formik={formik}\n            />\n          </Box>\n          <Box key=\"buttons\" sx={{ display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleEdit}\n              >\n                Edit\n              </Button>\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleClose}\n              >\n                Cancel\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </form>\n      <Loader visible={loading || fetching} />\n    </Box>\n  );\n}\n"],"names":["origin","URL","window","location","href","authFetch","input","_authProvider$user","_authProvider$user2","init","arguments","length","undefined","bodyObj","restInit","_objectWithoutProperties","_excluded","fetchInit","_objectSpread","headers","Headers","set","btoa","authProvider","user","username","password","body","JSON","stringify","transformedBody","Object","entries","forEach","entry","Array","isArray","map","elem","Date","id","transformBody","fetch","catch","reason","error","Error","cause","name","message","then","response","status","statusText","json","TrucksQuery","_ref","_ref$queryKey","_slicedToArray","queryKey","page","rowsPerPage","orderBy","order","queryParams","url","searchParams","append","concat","search","truckNumber","lastLocation","distance","TruckDelete","userId","method","TruckCreate","data","LocationsQuery","_ref2","_ref2$queryKey","LocationDelete","LocationCreate","LocationUpdate","updatedData","_excluded3","LocationQuery","query","LoadsQuery","_ref3","_ref3$queryKey","loadNumber","LoadDelete","LoadCreate","LoadUpdate","_excluded4","LoadQuery","OwnersQuery","_ref4","_ref4$queryKey","fullName","OwnerDelete","DriversQuery","_ref5","_ref5$queryKey","DriverDelete","CoordinatorsQuery","_ref6","_ref6$queryKey","CoordinatorDelete","UsersQuery","_ref7","_ref7$queryKey","UserDelete","UserCreate","UserUpdate","_excluded5","UserQuery","initialValues","zipCode","stateCode","stateName","NaN","ViewLocationForm","pathname","useLocation","navigate","useNavigate","setSnackbarMessage","useSnackbar","_useQuery","useQuery","split","queryFn","keepPreviousData","onError","severity","loading","isLoading","fetching","isFetching","formik","useFormik","enableReinitialize","onSubmit","_jsxs","Box","children","_jsx","handleSubmit","onReset","handleReset","sx","p","display","width","TextField","fieldName","label","disabled","marginTop","LocationField","paddingTop","Button","fullWidth","variant","size","color","type","onClick","replace","Loader","visible"],"sourceRoot":""}