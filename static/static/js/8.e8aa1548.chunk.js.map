{"version":3,"file":"static/js/8.e8aa1548.chunk.js","mappings":"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","sources":["locations/createLocation.tsx"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nimport { Loader, LocationField, TextField } from '../components';\n\nimport { LocationCreate } from '../api';\nimport { useSnackbar } from '../hooks';\nimport { CreateLocation } from '../utils/dataTypes';\n\nconst validationSchema = yup.object({\n  zipCode: yup.string().required('Zip Code is required'),\n  name: yup.string().required('Name is required'),\n  stateCode: yup.string().required('State Code is required'),\n  stateName: yup.string().required('State Name is required'),\n  location: yup\n    .tuple([\n      yup\n        .number()\n        .typeError('Latitude is required')\n        .min(-90, 'Latitude must be grater than or equal: -90')\n        .max(90, 'Latitude must be less than or equal: 90')\n        .required('Location should be in format \"latitude, longitude\"'),\n      yup\n        .number()\n        .typeError('Longitude is required')\n        .min(-180, 'Longitude must be grater than or equal: -180')\n        .max(180, 'Longitude must be less than or equal: 180')\n        .required('Location should be in format \"latitude, longitude\"'),\n    ])\n    .required('Location is required'),\n});\n\nconst initialValues = {\n  zipCode: '',\n  name: '',\n  stateCode: '',\n  stateName: '',\n  location: [NaN, NaN] as [number, number],\n};\n\nexport default function CreateLocationForm() {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const setSnackbarMessage = useSnackbar();\n\n  const { mutate, isLoading } = useMutation(LocationCreate, {\n    onSuccess: () => {\n      setSnackbarMessage({\n        severity: 'success',\n        message: 'Created',\n      });\n      queryClient.invalidateQueries(['locations']);\n      navigate(-1);\n    },\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const formik = useFormik<CreateLocation>({\n    initialValues,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      mutate(values as unknown as CreateLocation);\n    },\n  });\n\n  const handleClose = () => {\n    navigate(-1);\n  };\n\n  return (\n    <Box>\n      <form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\n        <Box sx={{ p: 3, display: 'grid' }}>\n          <Box key=\"controls\" sx={{ display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\n              <TextField fieldName=\"name\" label=\"Name\" formik={formik} />\n              <TextField\n                fieldName=\"stateName\"\n                label=\"State Name\"\n                formik={formik}\n              />\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\n              <TextField fieldName=\"zipCode\" label=\"Zip Code\" formik={formik} />\n              <TextField\n                fieldName=\"stateCode\"\n                label=\"State Code\"\n                formik={formik}\n              />\n            </Box>\n          </Box>\n          <Box key=\"location\" sx={{ marginTop: -2, display: 'inline-flex' }}>\n            <LocationField\n              fieldName=\"location\"\n              label={['Latitude', 'Longitude']}\n              formik={formik}\n            />\n          </Box>\n          <Box key=\"buttons\" sx={{ display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Create\n              </Button>\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleClose}\n              >\n                Cancel\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </form>\n      <Loader visible={isLoading} />\n    </Box>\n  );\n}\n"],"names":["validationSchema","yup","zipCode","required","name","stateCode","stateName","location","typeError","min","max","initialValues","NaN","CreateLocationForm","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","_useMutation","useMutation","LocationCreate","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","mutate","isLoading","formik","useFormik","enableReinitialize","onSubmit","values","_jsxs","Box","children","_jsx","handleSubmit","onReset","handleReset","sx","p","display","width","TextField","fieldName","label","marginTop","LocationField","paddingTop","Button","fullWidth","variant","size","color","type","onClick","Loader","visible"],"sourceRoot":""}