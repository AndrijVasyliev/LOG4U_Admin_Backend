{"version":3,"file":"static/js/7855.055d3428.chunk.js","mappings":"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","sources":["users/users.tsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { UsersQuery, UserDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, User } from '../utils/dataTypes';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof User;\r\n  getData: (row: User) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'fullName',\r\n    orderField: 'fullName',\r\n    getData: (row) => ({ data: `${row.fullName}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Full Name',\r\n  },\r\n  {\r\n    id: 'email',\r\n    orderField: 'email',\r\n    getData: (row) => ({ data: `${row.email}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Email',\r\n  },\r\n  {\r\n    id: 'userRole',\r\n    orderField: 'userRole',\r\n    getData: (row) => ({ data: `${row.userRole}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'User Role',\r\n  },\r\n  {\r\n    id: 'jobTitle',\r\n    orderField: 'jobTitle',\r\n    getData: (row) => ({ data: `${row.jobTitle}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Job Title',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof User,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof User) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\r\n  const [fullNameChanged, setFullNameChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(UserDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['user']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFullNameSearch(event.target.value);\r\n    setFullNameChanged(true);\r\n  };\r\n  const filterClearHandler = () => {\r\n    setFullNameChanged(false);\r\n    setFullNameSearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setFullNameChanged(false);\r\n    setQueryParams({ fullName: fullNameSearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (fullNameSearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Users\r\n        </Typography>\r\n      )}\r\n      <TextField\r\n        label=\"Full Name\"\r\n        value={fullNameSearch}\r\n        onChange={fullNameHandler}\r\n        onKeyUp={keyUpHandler}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter list\">\r\n        {(fullNameChanged || !fullNameSearch) &&\r\n        !(fullNameChanged && !fullNameSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!fullNameSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        <Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('asc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof User | undefined>(\r\n    'fullName',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    error,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['users', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: UsersQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n  });\r\n  React.useEffect(() => {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    setSnackbarMessage({\r\n      severity: 'error',\r\n      message: error instanceof Error ? error.message : JSON.stringify(error),\r\n    });\r\n  }, [error]);\r\n  const rows: User[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof User,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: User) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["headCells","id","orderField","getData","row","data","fullName","numeric","disablePadding","label","email","userRole","jobTitle","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","_jsx","children","_jsxs","TableRow","padding","Checkbox","name","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","onClick","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","fullNameSearch","setFullNameSearch","React","fullNameChanged","setFullNameChanged","location","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","mutate","isLoading","useMutation","UserDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","filterClearHandler","filterHandler","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","TextField","value","target","onKeyUp","key","size","Tooltip","title","IconButton","FilterListOffIcon","disabled","FilterListIcon","p","display","createHandler","relative","state","from","replace","AddIcon","editHandler","EditIcon","deleteHandler","DeleteIcon","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","UsersQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","width","height","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","stopPropagation","selectedIndex","concat","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","createSvgIcon","d"],"sourceRoot":""}