{"version":3,"file":"static/js/371.351696b0.chunk.js","mappings":"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","sources":["api/api.ts","trucks/editTruck.tsx","utils/dataTypes.ts"],"sourcesContent":["import { authProvider } from '../utils/auth';\nimport {\n  Coordinator,\n  Driver,\n  Load,\n  CreateLoad,\n  UpdateLoad,\n  Location,\n  CreateLocation,\n  UpdateLocation,\n  Owner,\n  Truck,\n  CreateTruck,\n  UpdateTruck,\n  User,\n  CreateUser,\n  UpdateUser,\n  Query,\n  QuerySingle,\n  Result,\n} from '../utils/dataTypes';\n\nconst SUCCESS_HTTP_CODE = 200;\nconst CREATED_HTTP_CODE = 201;\nconst FORBIDDEN_HTTP_CODE = 403;\nconst NOT_FOUND_HTTP_CODE = 404;\nconst CONFLICT_HTTP_CODE = 409;\n\nconst { origin } = new URL(window.location.href);\n\nconst transformBody = (body: object): Record<string, any> => {\n  const transformedBody: Record<string, any> = {};\n  Object.entries(body).forEach((entry) => {\n    if (Array.isArray(entry[1])) {\n      transformedBody[entry[0]] = entry[1].map((elem) =>\n        typeof elem === 'object' && !(elem instanceof Date) ? elem.id : elem,\n      );\n    } else if (typeof entry[1] === 'object' && !(entry[1] instanceof Date)) {\n      transformedBody[entry[0]] = entry[1] && entry[1].id;\n    } else {\n      transformedBody[entry[0]] = entry[1];\n    }\n  });\n  return transformedBody;\n};\n\nexport const authFetch: (\n  input: string | URL,\n  init?: RequestInit & { bodyObj?: object },\n) => Promise<object> = (input, init = {}) => {\n  const { bodyObj, ...restInit } = init;\n  const fetchInit = { ...restInit, headers: new Headers() };\n  fetchInit.headers.set(\n    'Authorization',\n    'Basic ' +\n      btoa(authProvider.user?.username + ':' + authProvider.user?.password),\n  );\n  if (bodyObj && typeof bodyObj === 'object') {\n    fetchInit.headers.set('Accept', 'application/json');\n    fetchInit.headers.set('Content-Type', 'application/json');\n    fetchInit.body = JSON.stringify(transformBody(bodyObj));\n  }\n  return fetch(input, fetchInit)\n    .catch((reason) => {\n      const error = new Error();\n      error.cause = reason;\n      error.name = 'Fetch error';\n      error.message = 'Network error has occurred';\n      throw error;\n    })\n    .then((response) => {\n      if (\n        response.status !== SUCCESS_HTTP_CODE &&\n        response.status !== CREATED_HTTP_CODE\n      ) {\n        const error = new Error();\n        error.cause = response;\n        if (response.status) {\n          error.name = response.status + ' ' + response.statusText;\n          switch (response.status) {\n            case FORBIDDEN_HTTP_CODE:\n              error.message = 'Insufficient permissions';\n              break;\n            case NOT_FOUND_HTTP_CODE:\n              error.message = 'Not found';\n              break;\n            case CONFLICT_HTTP_CODE:\n              error.message = 'Some field values invalidate unique constrain';\n              break;\n            default:\n              error.message = 'Some server error has occurred';\n          }\n        } else {\n          error.message = 'Network error has occurred';\n        }\n        throw error;\n      }\n      return response.json().catch((reason) => {\n        const error = new Error();\n        error.cause = reason;\n        error.name = 'Fetch error';\n        error.message = 'Server responded with incorrect data';\n        throw error;\n      });\n    });\n};\n\nexport const TrucksQuery: (\n  query: Query<{\n    search?: number;\n    truckNumber?: number;\n    lastLocation?: string;\n    distance?: string;\n  }>,\n) => Promise<Result<Truck>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/truck', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.lastLocation && queryParams?.distance) {\n    url.searchParams.append('lastLocation', `${queryParams.lastLocation}`);\n    url.searchParams.append('distance', `${queryParams.distance}`);\n  }\n  return authFetch(url) as Promise<Result<Truck>>;\n};\n\nexport const TruckDelete = (userId: string): Promise<Truck> => {\n  const url = new URL(`/truck/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Truck>;\n};\n\nexport const TruckCreate = (data: CreateTruck): Promise<Truck> => {\n  const url = new URL(`/truck`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Truck>;\n};\n\nexport const TruckUpdate = (data: UpdateTruck): Promise<Truck> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/truck/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Truck>;\n};\n\nexport const TruckQuery = (query: QuerySingle): Promise<Truck> => {\n  const url = new URL(`/truck/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Truck>;\n};\n\nexport const LocationsQuery: (\n  query: Query<{ search?: string; name?: string }>,\n) => Promise<Result<Location>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/location', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.name) {\n    url.searchParams.append('name', `${queryParams.name}`);\n  }\n  return authFetch(url) as Promise<Result<Location>>;\n};\n\nexport const LocationDelete = (userId: string): Promise<Location> => {\n  const url = new URL(`/location/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Location>;\n};\n\nexport const LocationCreate = (data: CreateLocation): Promise<Location> => {\n  const url = new URL(`/location`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Location>;\n};\n\nexport const LocationUpdate = (data: UpdateLocation): Promise<Location> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/location/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Location>;\n};\n\nexport const LocationQuery = (query: QuerySingle): Promise<Location> => {\n  const url = new URL(`/location/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Location>;\n};\n\nexport const LoadsQuery: (\n  query: Query<{ loadNumber?: number; truckNumber?: number }>,\n) => Promise<Result<Load>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/load', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.loadNumber) {\n    url.searchParams.append('loadNumber', `${queryParams.loadNumber}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Load>>;\n};\n\nexport const LoadDelete = (userId: string): Promise<Load> => {\n  const url = new URL(`/load/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Load>;\n};\n\nexport const LoadCreate = (data: CreateLoad): Promise<Load> => {\n  const url = new URL(`/load`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Load>;\n};\n\nexport const LoadUpdate = (data: UpdateLoad): Promise<Load> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/load/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Load>;\n};\n\nexport const LoadQuery = (query: QuerySingle): Promise<Load> => {\n  const url = new URL(`/load/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Load>;\n};\n\nexport const OwnersQuery: (\n  query: Query<{ search?: string; fullName?: number; truckNumber?: number }>,\n) => Promise<Result<Owner>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/owner', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Owner>>;\n};\n\nexport const OwnerDelete = (userId: string): Promise<Owner> => {\n  const url = new URL(`/owner/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Owner>;\n};\n\nexport const DriversQuery: (\n  query: Query<{\n    search?: string;\n    fullName?: number;\n    truckNumber?: number;\n    owner?: string;\n  }>,\n) => Promise<Result<Driver>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/driver', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.owner) {\n    url.searchParams.append('owner', `${queryParams.owner}`);\n  }\n  return authFetch(url) as Promise<Result<Driver>>;\n};\n\nexport const DriverDelete = (userId: string): Promise<Driver> => {\n  const url = new URL(`/driver/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Driver>;\n};\n\nexport const CoordinatorsQuery: (\n  query: Query<{\n    search?: string;\n    fullName?: number;\n    truckNumber?: number;\n    owner?: string;\n  }>,\n) => Promise<Result<Coordinator>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/coordinator', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.owner) {\n    url.searchParams.append('owner', `${queryParams.owner}`);\n  }\n  return authFetch(url) as Promise<Result<Coordinator>>;\n};\n\nexport const CoordinatorDelete = (userId: string): Promise<Coordinator> => {\n  const url = new URL(`/coordinator/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Coordinator>;\n};\n\nexport const UsersQuery: (\n  query: Query<{ search?: string; fullName?: number }>,\n) => Promise<Result<User>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/user', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  return authFetch(url) as Promise<Result<User>>;\n};\n\nexport const UserDelete = (userId: string): Promise<User> => {\n  const url = new URL(`/user/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<User>;\n};\n\nexport const UserCreate = (data: CreateUser): Promise<User> => {\n  const url = new URL(`/user`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<User>;\n};\n\nexport const UserUpdate = (data: UpdateUser): Promise<User> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/user/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<User>;\n};\n\nexport const UserQuery = (query: QuerySingle): Promise<User> => {\n  const url = new URL(`/user/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<User>;\n};\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Person4Icon from '@mui/icons-material/Person4';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport BadgeIcon from '@mui/icons-material/Badge';\n\nimport {\n  DateTimeField,\n  Loader,\n  SearchField,\n  SelectField,\n  SelectMultiField,\n  TextField,\n} from '../components';\n\nimport {\n  TruckUpdate,\n  TruckQuery,\n  OwnersQuery,\n  CoordinatorsQuery,\n  DriversQuery,\n} from '../api';\nimport { useSnackbar } from '../hooks';\nimport {\n  Owner,\n  Coordinator,\n  Driver,\n  UpdateTruck,\n  TruckCertificates,\n  TruckCrossborders,\n  TruckEquipments,\n  TruckStatuses,\n  TruckTypes,\n  TruckStatus,\n  TruckCrossborder,\n  TruckCertificate,\n  TruckType,\n} from '../utils/dataTypes';\nimport { cleanObject } from '../utils/queryHelpers';\n\nconst validationSchema = yup.object({\n  truckNumber: yup\n    .number()\n    .integer()\n    .typeError('Truck Number must be a integer number')\n    .required('Truck Number is required'),\n  status: yup.string().oneOf(TruckStatuses).required('Status is required'),\n  crossborder: yup\n    .string()\n    .oneOf(TruckCrossborders)\n    .required('Crossborder is required'),\n  certificate: yup\n    .string()\n    .oneOf(TruckCertificates)\n    .required('Certificate is required'),\n  type: yup.string().oneOf(TruckTypes).required('Type is required'),\n  equipment: yup\n    .array(yup.string().oneOf(TruckEquipments))\n    .min(0)\n    .required('Equipment is required'),\n  payload: yup\n    .number()\n    .integer()\n    .typeError('Payload must be a integer number')\n    .required('Payload is required'),\n  grossWeight: yup.string().required('Gross Weight is required'),\n  make: yup.string().required('Make is required'),\n  model: yup.string().required('Model is required'),\n  year: yup\n    .number()\n    .integer()\n    .typeError('Year must be a integer number')\n    .required('Year is required'),\n  color: yup.string().required('Color is required'),\n  vinCode: yup.string().required('Vin Code is required'),\n  licencePlate: yup.string().required('Licence Plate is required'),\n  licenceState: yup.string().required('Licence State is required'),\n  plateExpires: yup\n    .date()\n    .typeError('Enter correct date')\n    .required('Plate Expires is required'),\n  insideDims: yup.string().required('Inside Dims is required'),\n  doorDims: yup.string().required('Door Dims is required'),\n  validDims: yup.string().required('Valid Dims is required'),\n  owner: yup.object().required('Owner is required'),\n  coordinator: yup.object().typeError('Enter correct coordinator').nullable(),\n  driver: yup.object().typeError('Enter correct driver').nullable(),\n});\n\nconst initialValues = {\n  id: '',\n  truckNumber: undefined,\n  status: 'Available' as TruckStatus,\n  crossborder: 'Yes' as TruckCrossborder,\n  certificate: 'Hazmat' as TruckCertificate,\n  type: 'Cargo van' as TruckType,\n  equipment: [],\n  payload: undefined,\n  grossWeight: undefined,\n  make: undefined,\n  model: undefined,\n  year: undefined,\n  color: undefined,\n  vinCode: undefined,\n  licencePlate: undefined,\n  licenceState: undefined,\n  plateExpires: undefined,\n  insideDims: undefined,\n  doorDims: undefined,\n  validDims: undefined,\n  owner: undefined,\n  coordinator: undefined,\n  driver: undefined,\n};\n\nexport default function EditTruckForm() {\n  const [driverAddQueryParams, setDriverAddQueryParams] = React.useState<\n    Record<string, string>\n  >({});\n  const [coordinatorAddQueryParams, setCoordinatorAddQueryParams] =\n    React.useState<Record<string, string>>({});\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const setSnackbarMessage = useSnackbar();\n\n  const {\n    isLoading: loading,\n    isFetching: fetching,\n    data,\n  } = useQuery({\n    queryKey: ['truck', pathname.split('/')[3]],\n    queryFn: TruckQuery,\n    keepPreviousData: true,\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const { mutate, isLoading } = useMutation(TruckUpdate, {\n    onSuccess: () => {\n      setSnackbarMessage({\n        severity: 'success',\n        message: 'Saved',\n      });\n      queryClient.invalidateQueries(['trucks']);\n      navigate(-1);\n    },\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const formik = useFormik<UpdateTruck>({\n    initialValues: {\n      ...initialValues,\n      ...cleanObject(data, Object.keys(initialValues)),\n    },\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      mutate(values as unknown as UpdateTruck);\n    },\n  });\n\n  React.useEffect(() => {\n    if (formik.values.owner) {\n      setDriverAddQueryParams({ owner: formik.values.owner.id });\n      setCoordinatorAddQueryParams({ owner: formik.values.owner.id });\n    } else {\n      setDriverAddQueryParams((prev) => (Object.keys(prev).length ? {} : prev));\n      setCoordinatorAddQueryParams((prev) =>\n        Object.keys(prev).length ? {} : prev,\n      );\n    }\n  }, [formik.values.owner]);\n\n  React.useEffect(() => {\n    if (\n      formik.values.coordinator &&\n      formik.values.coordinator.owner &&\n      formik.values.coordinator.id !==\n        (formik.values.owner && formik.values.owner.id)\n    ) {\n      formik.setFieldValue('owner', formik.values.coordinator.owner, true);\n    }\n  }, [formik.values.coordinator]);\n\n  React.useEffect(() => {\n    if (\n      formik.values.driver &&\n      formik.values.driver.owner &&\n      formik.values.driver.id !==\n        (formik.values.owner && formik.values.owner.id)\n    ) {\n      formik.setFieldValue('owner', formik.values.driver.owner, true);\n    }\n  }, [formik.values.driver]);\n\n  const handleClose = () => {\n    navigate(-1);\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <form\n        onSubmit={formik.handleSubmit}\n        onReset={formik.handleReset}\n        style={{ height: '100%' }}\n      >\n        <Box sx={{ p: 3, display: 'grid', height: '100%' }}>\n          <Box\n            key=\"controls\"\n            sx={{\n              display: 'inline-flex',\n              height: '100%',\n              overflowX: 'hidden',\n              overflowY: 'scroll',\n            }}\n          >\n            <Box key=\"left\" sx={{ p: 1, width: '50%' }}>\n              <TextField\n                fieldName=\"truckNumber\"\n                label=\"Truck Number\"\n                formik={formik}\n              />\n              <SelectField\n                fieldName=\"crossborder\"\n                label=\"Cross Border\"\n                items={TruckCrossborders}\n                formik={formik}\n              />\n              <SelectField\n                fieldName=\"type\"\n                label=\"Type\"\n                items={TruckTypes}\n                formik={formik}\n              />\n              <TextField fieldName=\"payload\" label=\"Payload\" formik={formik} />\n              <TextField fieldName=\"make\" label=\"Make\" formik={formik} />\n              <TextField fieldName=\"year\" label=\"Year\" formik={formik} />\n              <TextField fieldName=\"vinCode\" label=\"Vin Code\" formik={formik} />\n              <TextField\n                fieldName=\"licenceState\"\n                label=\"Licence State\"\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"insideDims\"\n                label=\"Inside Dims\"\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"validDims\"\n                label=\"Valid Dims\"\n                formik={formik}\n              />\n              <SearchField<Owner>\n                fieldName=\"owner\"\n                label=\"Owner\"\n                getSelectedLabel={(selectedItem) =>\n                  `${selectedItem.fullName}, ${\n                    (selectedItem.type === 'Owner' && '(O)') ||\n                    (selectedItem.type === 'OwnerDriver' && '(O/d)')\n                  }, ${selectedItem.phone}`\n                }\n                getItemLabel={(item) => `${item.fullName}`}\n                getItemSecondLabel={(item) =>\n                  `${\n                    (item.type === 'Owner' && '(O)') ||\n                    (item.type === 'OwnerDriver' && '(O/d)')\n                  }, ${item.phone}`\n                }\n                ListIcon={Person4Icon}\n                queryFn={OwnersQuery}\n                startEmpty={false}\n                orderby=\"fullName\"\n                order=\"asc\"\n                formik={formik}\n              />\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, width: '50%' }}>\n              <SelectField\n                fieldName=\"status\"\n                label=\"Status\"\n                items={TruckStatuses}\n                formik={formik}\n              />\n              <SelectField\n                fieldName=\"certificate\"\n                label=\"Certificate\"\n                items={TruckCertificates}\n                formik={formik}\n              />\n              <SelectMultiField\n                fieldName=\"equipment\"\n                label=\"Equipment\"\n                items={TruckEquipments}\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"grossWeight\"\n                label=\"Gross Weight\"\n                formik={formik}\n              />\n              <TextField fieldName=\"model\" label=\"Model\" formik={formik} />\n              <TextField fieldName=\"color\" label=\"Color\" formik={formik} />\n              <TextField\n                fieldName=\"licencePlate\"\n                label=\"Licence Plate\"\n                formik={formik}\n              />\n              <DateTimeField\n                fieldName=\"plateExpires\"\n                label=\"Plate Expires\"\n                formik={formik}\n              />\n              <TextField\n                fieldName=\"doorDims\"\n                label=\"Door Dims\"\n                formik={formik}\n              />\n              <SearchField<Coordinator>\n                fieldName=\"coordinator\"\n                label=\"Coordinator\"\n                getSelectedLabel={(selectedItem) =>\n                  `${selectedItem.fullName}, ${\n                    (selectedItem.type === 'Coordinator' && '(C)') ||\n                    (selectedItem.type === 'CoordinatorDriver' && '(C/d)')\n                  }, ${selectedItem.phone}`\n                }\n                getItemLabel={(item) => `${item.fullName}`}\n                getItemSecondLabel={(item) =>\n                  `${\n                    (item.type === 'Coordinator' && '(C)') ||\n                    (item.type === 'CoordinatorDriver' && '(C/d)')\n                  }, ${item.phone}`\n                }\n                ListIcon={ContactPhoneIcon}\n                queryFn={CoordinatorsQuery}\n                startEmpty={false}\n                orderby=\"fullName\"\n                order=\"asc\"\n                additionalQueryParams={coordinatorAddQueryParams}\n                formik={formik}\n              />\n              <SearchField<Driver>\n                fieldName=\"driver\"\n                label=\"Driver\"\n                getSelectedLabel={(selectedItem) =>\n                  `${selectedItem.fullName}, ${\n                    (selectedItem.type === 'Driver' && '(D)') ||\n                    (selectedItem.type === 'OwnerDriver' && '(O/d)') ||\n                    (selectedItem.type === 'CoordinatorDriver' && '(C/d)')\n                  }, ${selectedItem.phone}`\n                }\n                getItemLabel={(item) =>\n                  `${item.fullName}${\n                    item.driveTrucks && item.driveTrucks[0]\n                      ? ', On Truck: ' + item.driveTrucks[0].truckNumber\n                      : ''\n                  }`\n                }\n                getItemSecondLabel={(item) =>\n                  `${\n                    (item.type === 'Driver' && '(D)') ||\n                    (item.type === 'OwnerDriver' && '(O/d)') ||\n                    (item.type === 'CoordinatorDriver' && '(C/d)')\n                  }, ${item.phone}`\n                }\n                ListIcon={BadgeIcon}\n                queryFn={DriversQuery}\n                startEmpty={false}\n                orderby=\"fullName\"\n                order=\"asc\"\n                additionalQueryParams={driverAddQueryParams}\n                formik={formik}\n              />\n            </Box>\n          </Box>\n          <Box key=\"buttons\" sx={{ paddingTop: 3, display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={!formik.dirty}\n              >\n                Save\n              </Button>\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleClose}\n              >\n                Cancel\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </form>\n      <Loader visible={isLoading || loading || fetching} />\n    </Box>\n  );\n}\n","import React from 'react';\nimport { AlertColor } from '@mui/material/Alert/Alert';\n\nexport const LangPriorities = ['EN', 'UA', 'ES', 'RU'] as const;\n\nexport const PersonTypes = [\n  'Owner',\n  'OwnerDriver',\n  'Coordinator',\n  'CoordinatorDriver',\n  'Driver',\n] as const;\n\nexport const UserRoles = ['Admin', 'Super Admin'] as const;\n\nexport const TruckTypes = [\n  'Cargo van',\n  'Reefer van',\n  'Box truck',\n  'Box truck Reefer',\n  'Straight truck',\n  'Hotshot',\n  'Tented box',\n] as const;\n\nexport const TruckStatuses = ['Available', 'Not Available'] as const;\n\nexport const TruckCrossborders = ['Yes', 'No'] as const;\n\nexport const TruckCertificates = [\n  'Hazmat',\n  'Tsa',\n  'TWIC',\n  'Tanker Endorsement',\n] as const;\n\nexport const TruckEquipments = [\n  'Dock height risers',\n  'Air ride',\n  'Lift gate',\n  'Keep from freezing',\n  'ICC bar',\n  'Vertical E-track',\n  'Horizontal E-track',\n  'Pallet jack',\n  'PPE',\n  'Ramps',\n  'Straps',\n  'Loads bars',\n  'Blankets',\n  'Pads',\n  'Fire extinguisher',\n] as const;\n\nexport type Order = 'asc' | 'desc';\nexport type QueryKey<T> = readonly [\n  key: string,\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: T,\n];\n// export type BaseQuery = {\n//   readonly queryKey: QueryKey;\n// };\nexport type Query<T> = {\n  readonly queryKey: QueryKey<T>;\n};\nexport type QuerySingleKey = readonly [key: string, recordId: string];\nexport type QuerySingle = {\n  readonly queryKey: QuerySingleKey;\n};\nexport type Result<T> = {\n  items: T[];\n  limit: number;\n  offset: number;\n  total: number;\n};\nexport type QueryFn = (query: Query<{ search: any }>) => Promise<Result<any>>;\nexport interface AuthContextType {\n  user: any;\n  signin: (\n    username: string,\n    password: string,\n    callback: (res: boolean) => void,\n  ) => void;\n  signout: (callback: VoidFunction) => void;\n}\nexport type SnackbarMessage = {\n  message: string;\n  severity: AlertColor;\n  handleClose?: (event?: React.SyntheticEvent | Event, reason?: string) => void;\n};\nexport type PersonType = (typeof PersonTypes)[number];\nexport type LangPriority = (typeof LangPriorities)[number];\nexport type UserRole = (typeof UserRoles)[number];\nexport type TruckType = (typeof TruckTypes)[number];\nexport type TruckStatus = (typeof TruckStatuses)[number];\nexport type TruckCrossborder = (typeof TruckCrossborders)[number];\nexport type TruckCertificate = (typeof TruckCertificates)[number];\nexport type TruckEquipment = (typeof TruckEquipments)[number];\n\nexport interface Person {\n  id: string;\n  fullName: string;\n  type: PersonType;\n  phone?: string;\n}\n\nexport interface Owner extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email: string;\n  address: string;\n  ownTrucks?: Truck[];\n  coordinators?: Coordinator[];\n  drivers?: Driver[];\n}\n\nexport interface Coordinator extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email: string;\n  address: string;\n  coordinateTrucks?: Truck[];\n  owner: Owner;\n}\n\nexport interface Driver extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email?: string;\n  address?: string;\n  driveTrucks?: Truck[];\n  owner: Owner;\n}\n\nexport interface Truck {\n  id: string;\n  truckNumber: number;\n  status: TruckStatus;\n  lastLocation?: [number, number];\n  lastCity?: Location;\n  locationUpdatedAt?: string;\n  milesHaversine?: number;\n  milesByRoads?: number;\n  crossborder: TruckCrossborder;\n  certificate: TruckCertificate;\n  type: TruckType;\n  equipment?: TruckEquipment[];\n  payload?: number;\n  grossWeight: string;\n  make: string;\n  model: string;\n  year: number;\n  color: string;\n  vinCode: string;\n  licencePlate: string;\n  licenceState: string;\n  plateExpires: Date;\n  insideDims: string;\n  doorDims?: string;\n  validDims: string;\n  owner?: Owner;\n  coordinator?: Coordinator;\n  driver?: Driver;\n}\n\nexport interface CreateTruck /*extends Omit<Truck, 'id'>*/ {\n  truckNumber?: number;\n  status?: TruckStatus;\n  crossborder?: TruckCrossborder;\n  certificate?: TruckCertificate;\n  type?: TruckType;\n  equipment?: TruckEquipment[];\n  payload?: number;\n  grossWeight?: string;\n  make?: string;\n  model?: string;\n  year?: number;\n  color?: string;\n  vinCode?: string;\n  licencePlate?: string;\n  licenceState?: string;\n  plateExpires?: Date;\n  insideDims?: string;\n  doorDims?: string;\n  validDims?: string;\n  owner?: Owner;\n  coordinator?: Coordinator;\n  driver?: Driver;\n}\n\nexport interface UpdateTruck extends Partial<CreateTruck> {\n  id: string;\n}\n\nexport interface Load {\n  id: string;\n  loadNumber: number;\n  pick?: Location;\n  pickDate?: Date;\n  deliver?: Location;\n  deliverDate?: Date;\n  milesByRoads?: number;\n  milesHaversine?: number;\n  weight: string;\n  truckType: TruckType[];\n  rate?: number;\n  bookedByUser?: User;\n  bookedByCompany?: string;\n  dispatchers?: User[];\n  checkInAs?: string;\n  truck?: Truck;\n}\n\nexport interface CreateLoad {\n  pick: Location | null;\n  pickDate: Date | null;\n  deliver: Location | null;\n  deliverDate?: Date | null;\n  weight: string;\n  truckType: TruckType[];\n  rate?: number;\n  bookedByUser?: User | null;\n  bookedByCompany?: string;\n  dispatchers?: User[];\n  checkInAs?: string;\n  truck?: Truck;\n}\n\nexport interface UpdateLoad extends Partial<CreateLoad> {\n  id: string;\n}\n\nexport interface Location {\n  id: string;\n  zipCode: string;\n  name: string;\n  stateCode: string;\n  stateName: string;\n  location: [number, number];\n}\n\nexport type CreateLocation = Omit<Location, 'id'>;\n\nexport interface UpdateLocation extends Partial<CreateLocation> {\n  id: string;\n}\n\nexport interface User {\n  id: string;\n  fullName: string;\n  phone?: string;\n  userRole: UserRole;\n  jobTitle: string;\n  email: string;\n}\n\nexport interface CreateUser extends Omit<User, 'id'> {\n  password?: string;\n}\n\nexport interface UpdateUser extends Partial<CreateUser> {\n  id: string;\n}\n"],"names":["origin","URL","window","location","href","authFetch","input","_authProvider$user","_authProvider$user2","init","arguments","length","undefined","bodyObj","restInit","_objectWithoutProperties","_excluded","fetchInit","_objectSpread","headers","Headers","set","btoa","authProvider","user","username","password","body","JSON","stringify","transformedBody","Object","entries","forEach","entry","Array","isArray","map","elem","Date","id","transformBody","fetch","catch","reason","error","Error","cause","name","message","then","response","status","statusText","json","TrucksQuery","_ref","_ref$queryKey","_slicedToArray","queryKey","page","rowsPerPage","orderBy","order","queryParams","url","searchParams","append","concat","search","truckNumber","lastLocation","distance","TruckDelete","userId","method","TruckCreate","data","TruckUpdate","updatedData","_excluded2","TruckQuery","query","LocationsQuery","_ref2","_ref2$queryKey","LocationDelete","LocationCreate","LocationUpdate","_excluded3","LocationQuery","LoadsQuery","_ref3","_ref3$queryKey","loadNumber","LoadDelete","LoadCreate","LoadUpdate","_excluded4","LoadQuery","OwnersQuery","_ref4","_ref4$queryKey","fullName","OwnerDelete","DriversQuery","_ref5","_ref5$queryKey","owner","DriverDelete","CoordinatorsQuery","_ref6","_ref6$queryKey","CoordinatorDelete","UsersQuery","_ref7","_ref7$queryKey","UserDelete","UserCreate","UserUpdate","_excluded5","UserQuery","validationSchema","yup","integer","typeError","required","oneOf","TruckStatuses","crossborder","TruckCrossborders","certificate","TruckCertificates","type","TruckTypes","equipment","TruckEquipments","min","payload","grossWeight","make","model","year","color","vinCode","licencePlate","licenceState","plateExpires","insideDims","doorDims","validDims","coordinator","nullable","driver","initialValues","EditTruckForm","_React$useState","React","_React$useState2","driverAddQueryParams","setDriverAddQueryParams","_React$useState3","_React$useState4","coordinatorAddQueryParams","setCoordinatorAddQueryParams","pathname","useLocation","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","_useQuery","useQuery","split","queryFn","keepPreviousData","onError","severity","loading","isLoading","fetching","isFetching","_useMutation","useMutation","onSuccess","invalidateQueries","mutate","formik","useFormik","cleanObject","keys","enableReinitialize","onSubmit","values","prev","setFieldValue","_jsxs","Box","sx","height","children","_jsx","handleSubmit","onReset","handleReset","style","p","display","overflowX","overflowY","width","TextField","fieldName","label","SelectField","items","SearchField","getSelectedLabel","selectedItem","phone","getItemLabel","item","getItemSecondLabel","ListIcon","Person4Icon","startEmpty","orderby","SelectMultiField","DateTimeField","ContactPhoneIcon","additionalQueryParams","driveTrucks","BadgeIcon","paddingTop","Button","fullWidth","variant","size","disabled","dirty","onClick","Loader","visible","UserRoles"],"sourceRoot":""}