{"version":3,"file":"static/js/946.c94cca01.chunk.js","mappings":"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","sources":["api/api.ts","users/users.tsx"],"sourcesContent":["import { authProvider } from '../utils/auth';\n\nconst { origin } = new URL(window.location.href);\n\nexport type Order = 'asc' | 'desc';\n\nexport const authFetch: (input: string | URL) => Promise<Response> = (\n  input,\n) => {\n  const init = { headers: new Headers() };\n  init.headers.set(\n    'Authorization',\n    'Basic ' +\n      btoa(authProvider.user?.username + ':' + authProvider.user?.password),\n  );\n  return fetch(input, init);\n};\n\nexport const TrucksQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: {\n    truckNumber?: number;\n    lastLocation?: string;\n    distance?: string;\n  },\n) => {\n  const url = new URL('/truck', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.lastLocation && queryParams?.distance) {\n    url.searchParams.append('lastLocation', `${queryParams.lastLocation}`);\n    url.searchParams.append('distance', `${queryParams.distance}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const LocationsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { search?: string; name?: string },\n) => {\n  const url = new URL('/location', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.name) {\n    url.searchParams.append('name', `${queryParams.name}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const LoadsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { loadNumber?: number; truckNumber?: number },\n) => {\n  const url = new URL('/load', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.loadNumber) {\n    url.searchParams.append('loadNumber', `${queryParams.loadNumber}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const OwnersQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/owner', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const DriversQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/driver', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const CoordinatorsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/coordinator', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const UsersQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number },\n) => {\n  const url = new URL('/user', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n","import * as React from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\nimport { visuallyHidden } from '@mui/utils';\n\nimport Loader from '../components/Loader';\n\nimport { UsersQuery } from '../api';\nimport { Order, User } from '../utils/dataTypes';\n\ninterface HeadCell {\n  id: string;\n  disablePadding: boolean;\n  orderField?: keyof User;\n  getData: (row: User) => { data: JSX.Element | string; title?: string };\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: readonly HeadCell[] = [\n  {\n    id: 'fullName',\n    orderField: 'fullName',\n    getData: (row) => ({ data: `${row.fullName}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'Full Name',\n  },\n  {\n    id: 'email',\n    orderField: 'email',\n    getData: (row) => ({ data: `${row.email}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'Email',\n  },\n  {\n    id: 'userRole',\n    orderField: 'userRole',\n    getData: (row) => ({ data: `${row.userRole}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'User Role',\n  },\n  {\n    id: 'jobTitle',\n    orderField: 'jobTitle',\n    getData: (row) => ({ data: `${row.jobTitle}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'Job Title',\n  },\n];\n\ninterface EnhancedTableProps {\n  numSelected: number;\n  onRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof User,\n  ) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  order: Order | undefined;\n  orderBy: string | undefined;\n  rowCount: number;\n}\n\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\n  backgroundColor: theme.palette.background.default,\n}));\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  maxWidth: '100px',\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n}));\n\nfunction stopPropagation(e: React.SyntheticEvent) {\n  e.stopPropagation();\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler =\n    (property: keyof User) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n\n  return (\n    <StyledTableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            name={'enhanced-table-checkbox-select-all'}\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'enhanced-table-checkbox-select-all',\n            }}\n          />\n        </StyledTableCell>\n        {headCells.map((headCell) => (\n          <StyledTableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'center'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={headCell.orderField && orderBy === headCell.orderField}\n              hideSortIcon={!headCell.orderField}\n              direction={orderBy === headCell.orderField ? order : 'asc'}\n              onClick={\n                headCell.orderField\n                  ? createSortHandler(headCell.orderField)\n                  : () => {\n                      return;\n                    }\n              }\n            >\n              {headCell.label}\n              {headCell.orderField && orderBy === headCell.orderField ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </StyledTableCell>\n        ))}\n      </TableRow>\n    </StyledTableHead>\n  );\n}\n\ninterface EnhancedTableToolbarProps {\n  numSelected: number;\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n}\n\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\n  const { numSelected, setQueryParams } = props;\n  const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\n  const [fullNameChanged, setFullNameChanged] = React.useState<boolean>(false);\n\n  const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFullNameSearch(event.target.value);\n    setFullNameChanged(true);\n  };\n  const userClearHandler = () => {\n    setFullNameChanged(false);\n    setFullNameSearch('');\n    setQueryParams({});\n  };\n  const filterHandler = () => {\n    setFullNameChanged(false);\n    setQueryParams({ fullName: fullNameSearch });\n  };\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(\n              theme.palette.primary.main,\n              theme.palette.action.activatedOpacity,\n            ),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{\n            flex: '1 1 100%',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n          }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Users\n        </Typography>\n      )}\n      <TextField\n        label=\"Full Name\"\n        id=\"fullName\"\n        value={fullNameSearch}\n        onChange={fullNameHandler}\n        size=\"small\"\n      />\n      {numSelected === 1 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          {(fullNameChanged || !fullNameSearch) &&\n          !(fullNameChanged && !fullNameSearch) ? (\n            <span>\n              <IconButton disabled={!fullNameSearch} onClick={filterHandler}>\n                <FilterListIcon />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton onClick={userClearHandler}>\n              <FilterListOffIcon />\n            </IconButton>\n          )}\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n}\n\nexport default function EnhancedTable() {\n  const [order, setOrder] = React.useState<Order | undefined>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof User | undefined>(\n    'fullName',\n  );\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\n  const tableContainerRef = React.useRef(null);\n\n  const {\n    isLoading,\n    isFetching,\n    data: { items, total } = { items: [], total: 0 },\n  } = useQuery({\n    queryKey: ['user', page, rowsPerPage, orderBy, order, queryParams],\n    queryFn: () => UsersQuery(page, rowsPerPage, orderBy, order, queryParams),\n    keepPreviousData: true,\n  });\n  const rows: User[] = items || [];\n\n  React.useEffect(() => {\n    if (tableContainerRef.current) {\n      const container = tableContainerRef.current as HTMLElement;\n      container.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n  }, [rows]);\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof User,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    const isDesc = orderBy === property && order === 'desc';\n    if (isDesc) {\n      setOrder(undefined);\n      setOrderBy(undefined);\n    } else {\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    }\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelected = rows.map((n: User) => n.id);\n      setSelected(newSelected);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected: readonly string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n  return (\n    <Box sx={{ width: '100%', height: '100%' }}>\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\n        <EnhancedTableToolbar\n          numSelected={selected.length}\n          setQueryParams={(query) => {\n            setQueryParams(query);\n            setPage(0);\n          }}\n        />\n        <TableContainer\n          ref={tableContainerRef}\n          sx={{ height: 'calc(100% - 115px)' }}\n        >\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size=\"small\"\n            stickyHeader\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows.map((row, index) => {\n                const isItemSelected = isSelected(`${row.id}`);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    onClick={(event) => handleClick(event, `${row.id}`)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <StyledTableCell padding=\"checkbox\">\n                      <Checkbox\n                        id={`${labelId}`}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                      />\n                    </StyledTableCell>\n                    {headCells.map((cell) => {\n                      const cellData = cell.getData(row);\n                      return (\n                        <StyledTableCell\n                          key={cell.id}\n                          title={cellData.title}\n                          align={cell.numeric ? 'right' : 'center'}\n                        >\n                          {cellData.data}\n                        </StyledTableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <Loader visible={isLoading || isFetching} />\n    </Box>\n  );\n}\n"],"names":["origin","URL","window","location","href","authFetch","input","_authProvider$user","_authProvider$user2","init","headers","Headers","set","btoa","authProvider","user","username","password","fetch","TrucksQuery","page","rowsPerPage","orderBy","order","queryParams","url","searchParams","append","concat","truckNumber","lastLocation","distance","then","res","json","LocationsQuery","search","name","LoadsQuery","loadNumber","OwnersQuery","fullName","DriversQuery","CoordinatorsQuery","UsersQuery","headCells","id","orderField","getData","row","data","numeric","disablePadding","label","email","userRole","jobTitle","StyledTableHead","styled","TableHead","_ref","backgroundColor","theme","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","numSelected","rowCount","onRequestSort","_jsx","children","_jsxs","TableRow","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","onClick","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","setQueryParams","_React$useState","React","_React$useState2","_slicedToArray","fullNameSearch","setFullNameSearch","_React$useState3","_React$useState4","fullNameChanged","setFullNameChanged","Toolbar","_objectSpread","pl","sm","pr","xs","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","TextField","value","target","size","Tooltip","title","IconButton","DeleteIcon","FilterListOffIcon","disabled","FilterListIcon","EnhancedTable","_React$useState5","_React$useState6","setOrder","_React$useState7","_React$useState8","setOrderBy","_React$useState9","_React$useState10","selected","setSelected","_React$useState11","_React$useState12","setPage","_React$useState13","_React$useState14","setRowsPerPage","_React$useState15","_React$useState16","tableContainerRef","_useQuery","useQuery","queryKey","queryFn","keepPreviousData","isLoading","isFetching","_useQuery$data","_useQuery$data2","items","total","rows","current","scrollTo","top","left","behavior","width","height","Paper","length","query","TableContainer","ref","Table","minWidth","stickyHeader","newSelected","n","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","selectedIndex","slice","handleClick","role","tabIndex","cursor","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","Loader","visible"],"sourceRoot":""}