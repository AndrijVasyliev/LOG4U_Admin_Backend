{"version":3,"file":"static/js/22.fcba65b1.chunk.js","mappings":"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","sources":["api/api.ts","trucks/trucks.tsx"],"sourcesContent":["import { authProvider } from '../utils/auth';\n\nconst { origin } = new URL(window.location.href);\n\nexport type Order = 'asc' | 'desc';\n\nexport const authFetch: (input: string | URL) => Promise<Response> = (\n  input,\n) => {\n  const init = { headers: new Headers() };\n  init.headers.set(\n    'Authorization',\n    'Basic ' +\n      btoa(authProvider.user?.username + ':' + authProvider.user?.password),\n  );\n  return fetch(input, init);\n};\n\nexport const TrucksQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: {\n    truckNumber?: number;\n    lastLocation?: string;\n    distance?: string;\n  },\n) => {\n  const url = new URL('/truck', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.lastLocation && queryParams?.distance) {\n    url.searchParams.append('lastLocation', `${queryParams.lastLocation}`);\n    url.searchParams.append('distance', `${queryParams.distance}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const LocationsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { search?: string; name?: string },\n) => {\n  const url = new URL('/location', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.name) {\n    url.searchParams.append('name', `${queryParams.name}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const LoadsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { loadNumber?: number; truckNumber?: number },\n) => {\n  const url = new URL('/load', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.loadNumber) {\n    url.searchParams.append('loadNumber', `${queryParams.loadNumber}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const OwnersQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/owner', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const DriversQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/driver', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const CoordinatorsQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number; truckNumber?: number },\n) => {\n  const url = new URL('/coordinator', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n\nexport const UsersQuery = (\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: { fullName?: number },\n) => {\n  const url = new URL('/user', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  return authFetch(url).then((res) => res.json());\n};\n","import * as React from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\nimport { visuallyHidden } from '@mui/utils';\n\nimport Loader from '../components/Loader';\n\nimport { TrucksQuery } from '../api';\nimport { Order, Truck } from '../utils/dataTypes';\n\ninterface HeadCell {\n  id: string;\n  disablePadding: boolean;\n  orderField?: keyof Truck;\n  getData: (row: Truck) => { data: JSX.Element | string; title?: string };\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: readonly HeadCell[] = [\n  {\n    id: 'truckNumber',\n    orderField: 'truckNumber',\n    getData: (row) => ({ data: `${row.truckNumber}` }),\n    numeric: true,\n    disablePadding: false,\n    label: 'Truck Number',\n  },\n  {\n    id: 'mainContactInfo',\n    getData: (row) => {\n      const coordinator = row.coordinator;\n      const owner = row.owner;\n      let path = '';\n      let type = '';\n      let firstRow = '';\n      let secondRow = '';\n      if (coordinator) {\n        path = `./coordinators/${coordinator.id}`;\n        type = '(C) ';\n        firstRow = `${coordinator.fullName}`;\n        secondRow = `${coordinator?.phone}`;\n      } else if (owner) {\n        path = `./owners/${owner.id}`;\n        type = `${owner.type === 'Owner' ? '(O) ' : ''}${\n          owner.type === 'OwnerDriver' ? '(O/d) ' : ''\n        }`;\n        firstRow = `${owner.fullName}`;\n        secondRow = `${owner?.phone}`;\n      }\n      return {\n        data: (\n          <span>\n            <b>{type}</b>\n            <a href={path} target=\"_blank\" onClick={stopPropagation}>\n              {firstRow}\n            </a>\n            <br />\n            <a\n              href={secondRow ? `tel:${secondRow}` : undefined}\n              target=\"_blank\"\n              onClick={stopPropagation}\n            >\n              {secondRow || ' '}\n            </a>\n          </span>\n        ),\n        title: type + '' + firstRow + '\\n' + secondRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Main Contact info',\n  },\n  {\n    id: 'status',\n    orderField: 'status',\n    getData: (row) => ({ data: `${row.status}` }),\n    numeric: false,\n    disablePadding: true,\n    label: 'Status',\n  },\n  {\n    id: 'location',\n    getData: (row) => {\n      if (row?.lastCity) {\n        const path = `./locations/${row.lastCity.id}`;\n        const firstRow = `${row.lastCity.name}, ${row.lastCity.stateCode}, ${row.lastCity.zipCode},`;\n        const secondRow = `${\n          row.locationUpdatedAt\n            ? new Date(row.locationUpdatedAt).toLocaleString()\n            : ''\n        }`;\n\n        return {\n          data: (\n            <span>\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\n                {firstRow}\n              </a>\n              <br />\n              {secondRow}\n            </span>\n          ),\n          title: firstRow + '\\n' + secondRow,\n        };\n      } else {\n        return { data: '' };\n      }\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Last known location',\n  },\n  {\n    id: 'truckInfo',\n    getData: (row) => {\n      const firstRow = row.type ? `${row.type}` : '';\n      const secondRow = row.equipment ? `${row.equipment.join(', ')}` : '';\n\n      return {\n        data: (\n          <span>\n            {firstRow}\n            <br />\n            {secondRow}\n          </span>\n        ),\n        title: firstRow + '\\n' + secondRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'Truck info',\n  },\n  {\n    id: 'dimsPayload',\n    getData: (row) => {\n      const firstRow = row.doorDims ? `${row.doorDims}` : '';\n      const secondRow = row.payload ? `${row.payload}` : '';\n\n      return {\n        data: (\n          <span>\n            {firstRow}\n            <br />\n            {secondRow}\n          </span>\n        ),\n        title: firstRow + '\\n' + secondRow,\n      };\n    },\n    numeric: false,\n    disablePadding: true,\n    label: 'DIMS/Payload',\n  },\n];\n\ninterface EnhancedTableProps {\n  numSelected: number;\n  onRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Truck,\n  ) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  order: Order | undefined;\n  orderBy: string | undefined;\n  rowCount: number;\n}\n\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\n  backgroundColor: theme.palette.background.default,\n}));\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  maxWidth: '100px',\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n}));\n\nfunction stopPropagation(e: React.SyntheticEvent) {\n  e.stopPropagation();\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler =\n    (property: keyof Truck) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n\n  return (\n    <StyledTableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            name={'enhanced-table-checkbox-select-all'}\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'enhanced-table-checkbox-select-all',\n            }}\n          />\n        </StyledTableCell>\n        {headCells.map((headCell) => (\n          <StyledTableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'center'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={headCell.orderField && orderBy === headCell.orderField}\n              hideSortIcon={!headCell.orderField}\n              direction={orderBy === headCell.orderField ? order : 'asc'}\n              onClick={\n                headCell.orderField\n                  ? createSortHandler(headCell.orderField)\n                  : () => {\n                      return;\n                    }\n              }\n            >\n              {headCell.label}\n              {headCell.orderField && orderBy === headCell.orderField ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </StyledTableCell>\n        ))}\n      </TableRow>\n    </StyledTableHead>\n  );\n}\n\ninterface EnhancedTableToolbarProps {\n  numSelected: number;\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, number>>>;\n}\n\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\n  const { numSelected, setQueryParams } = props;\n  const [truckNumberSearch, setTruckNumberSearch] = React.useState<number>(0);\n  const [truckNumberChanged, setTruckNumberChanged] =\n    React.useState<boolean>(false);\n\n  const truckNumberHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Number.isFinite(Number(event.target.value))) {\n      setTruckNumberSearch(Number(event.target.value));\n      setTruckNumberChanged(true);\n    }\n  };\n  const truckClearHandler = () => {\n    setTruckNumberChanged(false);\n    setTruckNumberSearch(0);\n    setQueryParams({});\n  };\n  const filterHandler = () => {\n    setTruckNumberChanged(false);\n    setQueryParams({ truckNumber: truckNumberSearch });\n  };\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(\n              theme.palette.primary.main,\n              theme.palette.action.activatedOpacity,\n            ),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{\n            flex: '1 1 100%',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n          }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Trucks\n        </Typography>\n      )}\n      <TextField\n        label=\"Truck Number\"\n        id=\"truckNumber\"\n        value={truckNumberSearch || ''}\n        onChange={truckNumberHandler}\n        size=\"small\"\n      />\n      {numSelected === 1 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          {(truckNumberChanged || !truckNumberSearch) &&\n          !(truckNumberChanged && !truckNumberSearch) ? (\n            <span>\n              <IconButton disabled={!truckNumberSearch} onClick={filterHandler}>\n                <FilterListIcon />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton onClick={truckClearHandler}>\n              <FilterListOffIcon />\n            </IconButton>\n          )}\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n}\n\nexport default function EnhancedTable() {\n  const [order, setOrder] = React.useState<Order | undefined>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof Truck | undefined>(\n    'truckNumber',\n  );\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\n  const tableContainerRef = React.useRef(null);\n\n  const {\n    isLoading,\n    isFetching,\n    data: { items, total } = { items: [], total: 0 },\n  } = useQuery({\n    queryKey: ['trucks', page, rowsPerPage, orderBy, order, queryParams],\n    queryFn: () => TrucksQuery(page, rowsPerPage, orderBy, order, queryParams),\n    keepPreviousData: true,\n  });\n  const rows: Truck[] = items || [];\n\n  React.useEffect(() => {\n    if (tableContainerRef.current) {\n      const container = tableContainerRef.current as HTMLElement;\n      container.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n  }, [rows]);\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof Truck,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    const isDesc = orderBy === property && order === 'desc';\n    if (isDesc) {\n      setOrder(undefined);\n      setOrderBy(undefined);\n    } else {\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    }\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelected = rows.map((n: Truck) => n.id);\n      setSelected(newSelected);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected: readonly string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n  return (\n    <Box sx={{ width: '100%', height: '100%' }}>\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\n        <EnhancedTableToolbar\n          numSelected={selected.length}\n          setQueryParams={(query) => {\n            setQueryParams(query);\n            setPage(0);\n          }}\n        />\n        <TableContainer\n          ref={tableContainerRef}\n          sx={{ height: 'calc(100% - 115px)' }}\n        >\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size=\"small\"\n            stickyHeader\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows.map((row, index) => {\n                const isItemSelected = isSelected(`${row.id}`);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    onClick={(event) => handleClick(event, `${row.id}`)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <StyledTableCell padding=\"checkbox\">\n                      <Checkbox\n                        id={`${labelId}`}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                      />\n                    </StyledTableCell>\n                    {headCells.map((cell) => {\n                      const cellData = cell.getData(row);\n                      return (\n                        <StyledTableCell\n                          key={cell.id}\n                          title={cellData.title}\n                          align={cell.numeric ? 'right' : 'center'}\n                        >\n                          {cellData.data}\n                        </StyledTableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <Loader visible={isLoading || isFetching} />\n    </Box>\n  );\n}\n"],"names":["origin","URL","window","location","href","authFetch","input","_authProvider$user","_authProvider$user2","init","headers","Headers","set","btoa","authProvider","user","username","password","fetch","TrucksQuery","page","rowsPerPage","orderBy","order","queryParams","url","searchParams","append","concat","truckNumber","lastLocation","distance","then","res","json","LocationsQuery","search","name","LoadsQuery","loadNumber","OwnersQuery","fullName","DriversQuery","CoordinatorsQuery","UsersQuery","headCells","id","orderField","getData","row","data","numeric","disablePadding","label","coordinator","owner","path","type","firstRow","secondRow","phone","_jsxs","children","_jsx","target","onClick","stopPropagation","undefined","title","status","lastCity","stateCode","zipCode","locationUpdatedAt","Date","toLocaleString","equipment","join","doorDims","payload","StyledTableHead","styled","TableHead","_ref","backgroundColor","theme","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","whiteSpace","textOverflow","overflow","e","EnhancedTableHead","props","onSelectAllClick","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","setQueryParams","_React$useState","React","_React$useState2","_slicedToArray","truckNumberSearch","setTruckNumberSearch","_React$useState3","_React$useState4","truckNumberChanged","setTruckNumberChanged","Toolbar","_objectSpread","pl","sm","pr","xs","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","TextField","value","Number","isFinite","size","Tooltip","IconButton","DeleteIcon","FilterListOffIcon","disabled","FilterListIcon","EnhancedTable","_React$useState5","_React$useState6","setOrder","_React$useState7","_React$useState8","setOrderBy","_React$useState9","_React$useState10","selected","setSelected","_React$useState11","_React$useState12","setPage","_React$useState13","_React$useState14","setRowsPerPage","_React$useState15","_React$useState16","tableContainerRef","_useQuery","useQuery","queryKey","queryFn","keepPreviousData","isLoading","isFetching","_useQuery$data","_useQuery$data2","items","total","rows","current","scrollTo","top","left","behavior","width","height","Paper","length","query","TableContainer","ref","Table","minWidth","stickyHeader","newSelected","n","isAsc","TableBody","index","isItemSelected","indexOf","labelId","hover","selectedIndex","slice","handleClick","role","tabIndex","cursor","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","Loader","visible"],"sourceRoot":""}