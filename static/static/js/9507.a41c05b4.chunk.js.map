{"version":3,"file":"static/js/9507.a41c05b4.chunk.js","mappings":"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","sources":["pushs/pushs.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { PushsQuery, UserDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Push } from '../utils/dataTypes';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\nimport { getPath, getType } from '../utils/queryHelpers';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Push;\r\n  getData: (row: Push) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'state',\r\n    orderField: 'state',\r\n    getData: (row) => ({ data: `${row.state}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Push State',\r\n  },\r\n  {\r\n    id: 'createdAt',\r\n    orderField: 'createdAt',\r\n    getData: (row) => {\r\n      const firstRow = new Date(row.createdAt).toLocaleString();\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Created At',\r\n  },\r\n  {\r\n    id: 'updatedAt',\r\n    orderField: 'updatedAt',\r\n    getData: (row) => {\r\n      const firstRow = new Date(row.updatedAt).toLocaleString();\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Updated At',\r\n  },\r\n  {\r\n    id: 'title',\r\n    getData: (row) => {\r\n      const firstRow = `${row.title}`;\r\n      const secondRow = `${row.subtitle}`;\r\n      return {\r\n        data: (\r\n          <span>\r\n            {`${firstRow}`}\r\n            <br />\r\n            {`${secondRow}`}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Title/Subtitle',\r\n  },\r\n  {\r\n    id: 'body',\r\n    getData: (row) => {\r\n      const firstRow = `${row.body}`;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Body',\r\n  },\r\n  {\r\n    id: 'to',\r\n    getData: (row) => {\r\n      const firstRow = `${row.to.fullName}`;\r\n      const secondRow = `${getType(row.to)}`;\r\n      const path = `./${getPath(row.to)}/view/${row.to.id}`;\r\n      return {\r\n        data: (\r\n          <span>\r\n            <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n              {`${firstRow}`}\r\n            </a>\r\n            <br />\r\n            {`${secondRow}`}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'To',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Push,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Push) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\r\n  const [fullNameChanged, setFullNameChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(UserDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['push']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFullNameSearch(event.target.value);\r\n    setFullNameChanged(true);\r\n  };\r\n  const filterClearHandler = () => {\r\n    setFullNameChanged(false);\r\n    setFullNameSearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setFullNameChanged(false);\r\n    setQueryParams({ fullName: fullNameSearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (fullNameSearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Pushs\r\n        </Typography>\r\n      )}\r\n      {/*<TextField\r\n        label=\"Full Name\"\r\n        value={fullNameSearch}\r\n        onChange={fullNameHandler}\r\n        onKeyUp={keyUpHandler}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter list\">\r\n        {(fullNameChanged || !fullNameSearch) &&\r\n        !(fullNameChanged && !fullNameSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!fullNameSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>*/}\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        {/*<Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>*/}\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('desc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Push | undefined>(\r\n    'createdAt',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['pushs', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: PushsQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows: Push[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Push,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Push) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    /*navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });*/\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["headCells","id","orderField","getData","row","data","concat","state","numeric","disablePadding","label","firstRow","Date","createdAt","toLocaleString","_jsx","children","title","updatedAt","secondRow","subtitle","_jsxs","body","to","fullName","getType","path","getPath","href","target","onClick","stopPropagation","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","name","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","fullNameSearch","setFullNameSearch","React","fullNameChanged","setFullNameChanged","queryClient","useLocation","useNavigate","useQueryClient","setSnackbarMessage","useSnackbar","mutate","isLoading","useMutation","UserDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","p","display","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","PushsQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","width","height","Paper","query","TableContainer","ref","Table","minWidth","size","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","selectedIndex","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","value"],"sourceRoot":""}