{"version":3,"file":"static/js/9683.910d1b10.chunk.js","mappings":"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","sources":["emails/emails.tsx","utils/stopPropagation.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nimport { EmailsQuery, UserDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Email, Person, User } from '../utils/dataTypes';\r\nimport { getPath, getType } from '../utils/queryHelpers';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Email;\r\n  getData: (row: Email) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'state',\r\n    orderField: 'state',\r\n    getData: (row) => ({ data: `${row.state}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Email State',\r\n  },\r\n  {\r\n    id: 'createdAt',\r\n    orderField: 'createdAt',\r\n    getData: (row) => {\r\n      const firstRow = new Date(row.createdAt).toLocaleString();\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Created At',\r\n  },\r\n  {\r\n    id: 'updatedAt',\r\n    orderField: 'updatedAt',\r\n    getData: (row) => {\r\n      const firstRow = new Date(row.updatedAt).toLocaleString();\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Updated At',\r\n  },\r\n  {\r\n    id: 'from',\r\n    getData: (row) => {\r\n      const firstRow = row.from;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'From',\r\n  },\r\n  {\r\n    id: 'subject',\r\n    getData: (row) => {\r\n      const firstRow = row.subject;\r\n      return {\r\n        data: <span>{`${firstRow}`}</span>,\r\n        title: firstRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Subject',\r\n  },\r\n  {\r\n    id: 'to',\r\n    getData: (row) => {\r\n      const firstTo = row.to && row.to[0];\r\n      if (firstTo?.toType === 'Person') {\r\n        const to = firstTo.to as Person;\r\n        const firstRow = `${to.fullName}`;\r\n        const secondRow = `${getType(to)}`;\r\n        const path = `./${getPath(to)}/view/${to.id}`;\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {`${firstRow}`}\r\n              </a>\r\n              <br />\r\n              {`${secondRow}`}\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      }\r\n      if (firstTo?.toType === 'User') {\r\n        const to = firstTo.to as User;\r\n        const firstRow = `${to.fullName}`;\r\n        const secondRow = `${to.userRole}`;\r\n        const path = `./users/view/${to.id}`;\r\n        return {\r\n          data: (\r\n            <span>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {`${firstRow}`}\r\n              </a>\r\n              <br />\r\n              {`${secondRow}`}\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      }\r\n      return { data: '' };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'First To',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Email,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Email) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            name={'enhanced-table-checkbox-select-all'}\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'enhanced-table-checkbox-select-all',\r\n            }}\r\n          />\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<React.SetStateAction<Record<string, string>>>;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [fullNameSearch, setFullNameSearch] = React.useState<string>('');\r\n  const [fullNameChanged, setFullNameChanged] = React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(UserDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['email']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const fullNameHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFullNameSearch(event.target.value);\r\n    setFullNameChanged(true);\r\n  };\r\n  const filterClearHandler = () => {\r\n    setFullNameChanged(false);\r\n    setFullNameSearch('');\r\n    setQueryParams({});\r\n  };\r\n  const filterHandler = () => {\r\n    setFullNameChanged(false);\r\n    setQueryParams({ fullName: fullNameSearch });\r\n  };\r\n  const keyUpHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n    if (fullNameSearch) {\r\n      filterHandler();\r\n    } else {\r\n      filterClearHandler();\r\n    }\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        overflow: 'hidden',\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Emails\r\n        </Typography>\r\n      )}\r\n      {/*<TextField\r\n        label=\"Full Name\"\r\n        value={fullNameSearch}\r\n        onChange={fullNameHandler}\r\n        onKeyUp={keyUpHandler}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter list\">\r\n        {(fullNameChanged || !fullNameSearch) &&\r\n        !(fullNameChanged && !fullNameSearch) ? (\r\n          <span>\r\n            <IconButton disabled={!fullNameSearch} onClick={filterHandler}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={filterClearHandler}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>*/}\r\n      <Box sx={{ p: 1, display: 'inline-flex' }}>\r\n        {/*<Tooltip title=\"Create\">\r\n          <span>\r\n            <IconButton onClick={createHandler}>\r\n              <AddIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Edit\">\r\n          <span>\r\n            <IconButton disabled={selected.length !== 1} onClick={editHandler}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <span>\r\n            <IconButton\r\n              disabled={selected.length !== 1}\r\n              onClick={deleteHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>*/}\r\n      </Box>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>('desc');\r\n  const [orderBy, setOrderBy] = React.useState<keyof Email | undefined>(\r\n    'createdAt',\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['emails', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: EmailsQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows: Email[] = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Email,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Email) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    /*navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });*/\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: readonly string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onDoubleClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        id={`${labelId}`}\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                        onClick={(event) => handleSelect(event, `${row.id}`)}\r\n                      />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from 'react';\r\n\r\nexport function stopPropagation(e: React.SyntheticEvent) {\r\n  e.stopPropagation();\r\n}\r\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["headCells","id","orderField","getData","row","data","concat","state","numeric","disablePadding","label","firstRow","Date","createdAt","toLocaleString","_jsx","children","title","updatedAt","from","subject","firstTo","to","toType","fullName","secondRow","getType","path","getPath","_jsxs","href","target","onClick","stopPropagation","userRole","StyledTableHead","styled","TableHead","_ref","theme","backgroundColor","palette","background","default","StyledTableCell","TableCell","maxWidth","paddingTop","paddingBottom","whiteSpace","textOverflow","overflow","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","TableRow","padding","Checkbox","name","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","fullNameSearch","setFullNameSearch","React","fullNameChanged","setFullNameChanged","queryClient","useLocation","useNavigate","useQueryClient","setSnackbarMessage","useSnackbar","mutate","isLoading","useMutation","UserDelete","onSuccess","severity","message","invalidateQueries","onError","error","Error","JSON","stringify","Toolbar","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","variant","p","display","Loader","visible","EnhancedTable","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","queryParams","tableContainerRef","isFetching","items","total","useQuery","queryKey","queryFn","EmailsQuery","keepPreviousData","retry","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","width","height","Paper","query","TableContainer","ref","Table","minWidth","size","stickyHeader","n","handleRequestSort","isAsc","undefined","TableBody","index","isItemSelected","indexOf","labelId","hover","onDoubleClick","role","tabIndex","cursor","handleSelect","selectedIndex","slice","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","value","e","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","notifyOptions","listeners","getCurrentResult","currentResult","variables","mutateOptions","build","addObserver","execute","getDefaultState","result","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","listener","arg1","arg2","arg3","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop"],"sourceRoot":""}