{"version":3,"file":"static/js/666.f20105c3.chunk.js","mappings":"yiBAQMA,EAAkB,GAElBC,EAAsB,SAACC,GAG3B,IAAIC,GAAoBD,EAAe,IAAIE,MAAM,IAEjD,OADAD,EAAmBA,EAAmB,EAAIE,KAAKC,KAAKH,GAAoB,CAE1E,EAEe,SAASI,EAAkBC,GAMtC,IALFC,EAAKD,EAALC,MACAC,EAAKF,EAALE,MAKAC,EAA4CC,EAAAA,SAAuB,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9DI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAChCI,EAA2BR,EAA3BQ,WAAYC,EAAeT,EAAfS,WACdhB,EACJe,IAAcE,EAAAA,EAAAA,GAAW,IAAIf,KAAKa,GAAajB,GAG3CoB,EAAa,IAAIhB,KAASF,EAEhCU,EAAAA,WAAgB,WACd,GAAIQ,EAAY,CACdJ,EAAkBf,EAAoBC,IACtC,IAAMmB,EAAWC,aAAY,WAC3BN,EAAkBf,EAAoBC,GACxC,GAAG,KACH,OAAO,WACLqB,cAAcF,GACdL,EAAkB,EACpB,CACF,CACF,GAAG,CAACI,EAAYlB,IAEhB,IAAMsB,GAAcC,EAAAA,EAAAA,MACpBC,GAA8BC,EAAAA,EAAAA,GAAYC,EAAAA,GAAa,CACrDC,UAAW,WACTL,EAAYM,kBAAkB,CAC5BC,SAAU,CAAC,UACXC,YAAa,UAGjB,EACAC,QAAS,SAACC,GAEV,IAVMC,EAAMT,EAANS,OAmBFC,GAnBmBV,EAATW,UAmBH,2BAAAC,OAA8B5B,IACrC6B,EAAK,GAAAD,OACTlB,GAAcF,EACV,iBACAA,EAAWsB,SACX,gBACAzB,EACA,MACA,IAEN,OACE0B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,GAAE,GAAAL,OAAKF,GACPG,MAAOA,EACPK,GAAI,CAAEC,EAAG,EAAGC,OAAQ,OAAQC,WAAY,SAAUC,SAAU,WAC5DC,WAAS,EACTC,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,eAzB8B,SAACC,GACjCA,EAAMC,iBACND,EAAME,kBACNrB,EAAO,CAAEQ,GAAIlC,EAAMkC,GAAI1B,WAAYG,EAAa,KAAO,IAAIhB,MAC7D,EAqB8CqD,SAEzCrC,GACCsC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,aAEJhB,EAAAA,EAAAA,KAAA,SAAM,IAAE1B,EAAe,UAGzB,WAIR,C,4CC9CM4C,EAAiC,CACrC,CACEhB,GAAI,cACJiB,WAAY,cACZC,QAAS,SAACC,GAAG,MAAM,CAAEC,KAAK,GAADzB,OAAKwB,EAAIE,aAAe,EACjDC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,mBAET,CACExB,GAAI,kBACJkB,QAAS,SAACC,GACR,IAAMM,EAASN,EAAIO,aAAeP,EAAIQ,MAClCC,EAAO,GACPC,EAAO,GACPC,EAAW,GACXC,EAAY,GAOhB,OANIN,IACFG,EAAI,KAAAjC,QAAQqC,EAAAA,EAAAA,IAAQP,GAAO,UAAA9B,OAAS8B,EAAOzB,IAC3C6B,EAAI,GAAAlC,QAAMsC,EAAAA,EAAAA,IAAQR,GAAO,KACzBK,EAAQ,GAAAnC,OAAM8B,EAAO5B,UACrBkC,EAAS,GAAApC,OAAY,OAAN8B,QAAM,IAANA,OAAM,EAANA,EAAQS,QAElB,CACLd,MACEL,EAAAA,EAAAA,MAAA,QAAMoB,MAAO,CAAEC,QAAS,QAAStB,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,QACEoB,MAAO,CACLE,aAAc,WACdC,SAAU,UACVxB,SAAA,EAEFhB,EAAAA,EAAAA,KAAA,KAAAgB,SAAIe,KACJ/B,EAAAA,EAAAA,KAAA,KAAGyC,KAAMX,EAAMY,OAAO,SAASC,QAAS5B,EAAAA,EAAgBC,SACrDgB,KAEHhC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KACEyC,KAAMR,EAAS,OAAApC,OAAUoC,QAAcW,EACvCF,OAAO,SACPC,QAAS5B,EAAAA,EAAgBC,SAExBiB,GAAa,aAGlBjC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CACTnC,KAAK,QACLiC,QAAS,SAAC9B,IACRE,EAAAA,EAAAA,GAAgBF,GAChBiC,UAAUC,UAAUC,UAAUhB,EAAW,IAAMC,EACjD,EAAEjB,UAEFhB,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAAC9C,GAAI,CAAEE,OAAQ,OAAQ6C,MAAO,eAIhDpD,MAAOiC,EAAO,GAAKC,EAAW,KAAOC,EAEzC,EACAT,SAAS,EACTC,gBAAgB,EAChBC,MAAO,2BAET,CACExB,GAAI,YACJkB,QAAS,SAACC,GACR,IAAMW,EAAWX,EAAIU,KAAI,GAAAlC,OAAMwB,EAAIU,MAAS,GACtCE,EAAYZ,EAAI8B,UAAS,GAAAtD,OAAMwB,EAAI8B,UAAUC,KAAK,OAAU,GAElE,MAAO,CACL9B,MACEL,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGgB,GACDhC,EAAAA,EAAAA,KAAA,SACCiC,KAGLnC,MAAOkC,EAAW,KAAOC,EAE7B,EACAT,SAAS,EACTC,gBAAgB,EAChBC,MAAO,iBAET,CACExB,GAAI,UACJkB,QAAS,SAACC,GACR,IAAMW,EAAWX,EAAIgC,YAAW,GAAAxD,OAAMwB,EAAIgC,aAAgB,GACpDpB,EAAYZ,EAAIiC,QAAO,GAAAzD,OAAMwB,EAAIiC,SAAY,GAEnD,MAAO,CACLhC,MACEL,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGgB,GACDhC,EAAAA,EAAAA,KAAA,SACCiC,KAGLnC,MAAOkC,EAAW,KAAOC,EAE7B,EACAT,SAAS,EACTC,gBAAgB,EAChBC,MAAO,kBAET,CACExB,GAAI,OACJkB,QAAS,SAACC,GACR,IAAMW,EAAWX,EAAIkC,WAAU,GAAA1D,OAAMwB,EAAIkC,YAAe,GAClDtB,EAAYZ,EAAImC,SAAQ,GAAA3D,OAAMwB,EAAImC,UAAa,GAErD,MAAO,CACLlC,MACEL,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGgB,GACDhC,EAAAA,EAAAA,KAAA,SACCiC,KAGLnC,MAAOkC,EAAW,KAAOC,EAE7B,EACAT,SAAS,EACTC,gBAAgB,EAChBC,MAAO,oBAET,CACExB,GAAI,SACJiB,WAAY,SACZC,QAAS,SAACC,GAAG,MAAM,CAAEC,KAAK,GAADzB,OAAKwB,EAAIoC,QAAU,EAC5CjC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,UAET,CACExB,GAAI,gBACJkB,QAAS,SAACC,GAAG,MAAM,CACjBC,KAAK,GAADzB,OAAKwB,EAAIqC,aAAerC,EAAIqC,aAAaC,QAAQ,GAAK,IAC3D,EACDnC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,oBAET,CACExB,GAAI,WACJkB,QAAS,SAACC,GACR,GAAO,OAAHA,QAAG,IAAHA,GAAAA,EAAKuC,SAAU,CACjB,IAAM9B,EAAI,oBAAAjC,OAAuBwB,EAAIuC,SAAS1D,IACxC8B,EAAQ,GAAAnC,OAAMwB,EAAIuC,SAASC,KAAI,MAAAhE,OAAKwB,EAAIuC,SAASE,UAAS,MAAAjE,OAAKwB,EAAIuC,SAASG,SAC5E9B,EAAS,GAAApC,OACbwB,EAAI2C,kBACA,IAAIrG,KAAK0D,EAAI2C,mBAAmBC,iBAChC,IAGN,MAAO,CACL3C,MACEL,EAAAA,EAAAA,MAAA,QAAMoB,MAAO,CAAEC,QAAS,QAAStB,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,QACEoB,MAAO,CACLE,aAAc,WACdC,SAAU,UACVxB,SAAA,EAEFhB,EAAAA,EAAAA,KAAA,KAAGyC,KAAMX,EAAMY,OAAO,SAASC,QAAS5B,EAAAA,EAAgBC,SACrDgB,KAEHhC,EAAAA,EAAAA,KAAA,SACCiC,MAEHjC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CACTnC,KAAK,QACLiC,QAAS,SAAC9B,IACRE,EAAAA,EAAAA,GAAgBF,GAChBiC,UAAUC,UAAUC,UAAUhB,EAChC,EAAEhB,UAEFhB,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAAC9C,GAAI,CAAEE,OAAQ,OAAQ6C,MAAO,eAIhDpD,MAAOkC,EAAW,KAAOC,EAE7B,CACE,MAAO,CAAEX,KAAM,GAEnB,EACAE,SAAS,EACTC,gBAAgB,EAChBC,MAAO,6BAET,CACExB,GAAI,eACJkB,QAAS,SAACC,GAAG,MAAM,CACjBC,KAAK,GAADzB,OAAKwB,EAAI6C,eAAiB7C,EAAI6C,eAAeP,QAAQ,GAAK,IAC/D,EACDnC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,mBAgBLyC,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,SAAArG,GAAQ,MAAQ,CACxDuG,gBADgDvG,EAALwG,MACpBC,QAAQC,WAAWC,QAC3C,IAEKC,GAAkBP,EAAAA,EAAAA,IAAOQ,EAAAA,EAAPR,EAAkB,SAAAS,GAAQA,EAALN,MAAK,MAAQ,CACxDO,SAAU,QACVC,WAAY,MACZC,cAAe,MACfC,WAAY,SACZ1C,aAAc,WACdC,SAAU,SACX,IAED,SAAS0C,EAAkBC,GAQrBA,EANFC,iBADF,IAEEC,EAKEF,EALFE,MACAC,EAIEH,EAJFG,QAGAC,GACEJ,EAHFK,YAGEL,EAFFM,SAEEN,EADFI,eAOF,OACEvF,EAAAA,EAAAA,KAACmE,EAAe,CAAAnD,UACdC,EAAAA,EAAAA,MAACyE,EAAAA,EAAQ,CAAA1E,SAAA,EACPhB,EAAAA,EAAAA,KAAC2E,EAAe,CAACgB,MAAM,SAASC,QAAQ,WAAU5E,SAAC,YAGlDE,EAAU2E,KAAI,SAACC,GAAQ,OACtB9F,EAAAA,EAAAA,KAAC2E,EAAe,CAEdgB,MAAOG,EAAStE,QAAU,QAAU,SACpCoE,QAASE,EAASrE,eAAiB,OAAS,SAC5CsE,cAAeT,IAAYQ,EAAS5F,IAAKmF,EAAcrE,UAEvDC,EAAAA,EAAAA,MAAC+E,EAAAA,EAAc,CACbC,OAAQH,EAAS3E,YAAcmE,IAAYQ,EAAS3E,WACpD+E,cAAeJ,EAAS3E,WACxBgF,UAAWb,IAAYQ,EAAS3E,WAAakE,EAAQ,MACrD1C,QACEmD,EAAS3E,YAtBpBiF,EAuBiCN,EAAS3E,WAvBhB,SAACN,GAC1B0E,EAAc1E,EAAOuF,EACvB,GAsBgB,WAEA,EACLpF,SAAA,CAEA8E,EAASpE,MACToE,EAAS3E,YAAcmE,IAAYQ,EAAS3E,YAC3CnB,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CAACC,UAAU,OAAOnG,GAAIoG,EAAAA,EAAevF,SAC5B,SAAVqE,EAAmB,oBAAsB,qBAE1C,SAtBDS,EAAS5F,IAZtB,IAACkG,CAoCuB,QAK5B,CASA,SAASI,EAAqBrB,GAC5B,IAAQsB,EAA6BtB,EAA7BsB,SAAUC,EAAmBvB,EAAnBuB,eAClBxI,EAA0CC,EAAAA,SACxC,MACDC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAFMyI,EAAavI,EAAA,GAAEwI,EAAgBxI,EAAA,GAGtCyI,EAAoC1I,EAAAA,SAAe,IAAG2I,GAAAzI,EAAAA,EAAAA,GAAAwI,EAAA,GAA/CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAwD9I,EAAAA,SAErD,CAAC,GAAE+I,GAAA7I,EAAAA,EAAAA,GAAA4I,EAAA,GAFCE,EAAoBD,EAAA,GAAEE,EAAuBF,EAAA,GAGpDG,EAA8BlJ,EAAAA,SAAoC,IAAGmJ,GAAAjJ,EAAAA,EAAAA,GAAAgJ,EAAA,GAA9DE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,EAA0CtJ,EAAAA,SAAe,KAAIuJ,GAAArJ,EAAAA,EAAAA,GAAAoJ,EAAA,GAAtDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,EACE1J,EAAAA,UAAwB,GAAM2J,GAAAzJ,EAAAA,EAAAA,GAAAwJ,EAAA,GADzBE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAIxC/I,KAFWkJ,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACGlJ,EAAAA,EAAAA,OAEdmJ,IAAqBC,EAAAA,EAAAA,MAE3BnJ,IAA8BC,EAAAA,EAAAA,GAAYmJ,EAAAA,GAAa,CACrDjJ,UAAW,WACT+I,GAAmB,CACjBG,SAAU,UACVC,QAAS,YAEXxJ,GAAYM,kBAAkB,CAAC,UACjC,EACAG,QAAS,SAACC,GACR0I,GAAmB,CACjBG,SAAU,QACVC,QAAS9I,aAAiB+I,MAAQ/I,EAAM8I,QAAUE,KAAKC,UAAUjJ,IAErE,IAbcG,IAAFX,GAANS,OAAiBT,GAATW,WAgBV+I,GAAYxK,EAAAA,SAAc,WAC9B,OAAOyK,EAAAA,EAAAA,IAAS,SAACC,GACfzB,EAAwB,CAAEyB,OAAAA,GAC5B,GAAG,IACL,GAAG,IAWDC,IAVoDC,EAAAA,EAAAA,GAKpD,CACAzJ,SAAU,CAAC,YAAa,EAAG,GAAI,OAAQ,MAAO6H,GAC9C6B,SAASC,EAAAA,EAAAA,IAAgBC,EAAAA,IAAgB,GACzCC,kBAAkB,EAClBC,OAAO,IATD9H,KAAQ+H,SAAJ,IAAAP,GAAc,CAAEO,MAAO,GAAIC,MAAO,GAAGR,IAAjCO,MAYhBlL,EAAAA,WAAgB,WACd,GAAIwI,EAAe,CACjB,IAAM4C,EAAmBF,GAAMG,QAC7B,SAACC,GAAI,OAAKA,EAAKvJ,KAAOyG,EAAczG,EAAE,IAExCsH,EAAW,CAACb,GAAa9G,QAAA6J,EAAAA,EAAAA,GAAKH,IAChC,MAEI/B,EADiB,KAAfT,EACS,IAED2C,EAAAA,EAAAA,GAAKL,IAGrB,GAAG,CAAC1C,EAAe0C,KAwEnB,OACEpI,EAAAA,EAAAA,MAAC0I,EAAAA,EAAO,CACNxJ,IAAEyJ,EAAAA,EAAAA,GAAA,CACAC,GAAI,CAAEC,GAAI,GACVC,GAAI,CAAEC,GAAI,EAAGF,GAAI,IACbrD,EAASwD,OAAS,GAAK,CACzBC,QAAS,SAAC3F,GAAK,OACb4F,EAAAA,EAAAA,IACE5F,EAAMC,QAAQ4F,QAAQC,KACtB9F,EAAMC,QAAQ8F,OAAOC,iBACtB,IAELvJ,SAAA,CAEDyF,EAASwD,OAAS,GACjBhJ,EAAAA,EAAAA,MAACuJ,EAAAA,EAAU,CACTrK,GAAI,CAAEsK,KAAM,YACZ9J,MAAM,UACNF,QAAQ,YACR6F,UAAU,MAAKtF,SAAA,CAEdyF,EAASwD,OAAO,gBAGnBjK,EAAAA,EAAAA,KAACwK,EAAAA,EAAU,CACTrK,GAAI,CACFsK,KAAM,WACNxF,WAAY,SACZ1C,aAAc,WACdC,SAAU,UAEZ/B,QAAQ,KACRP,GAAG,aACHoG,UAAU,MAAKtF,SAChB,mBAIHhB,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CACFC,UAAU,MACVnG,GAAI,CACF,uBAAwB,CAAEC,EAAG,EAAG8C,MAAO,UACvClC,UAEFhB,EAAAA,EAAAA,KAAC0K,EAAAA,EAAY,CACXC,eAAgB,SAACC,GAAM,MACH,kBAAXA,EACHA,EAAM,GAAA/K,OACH+K,EAAO/G,KAAI,MAAAhE,OAAK+K,EAAO7G,QAAO,MAAAlE,OAAK+K,EAAOC,UAAW,EAE9DC,cAAe,SAACC,GAAC,OAAKA,CAAC,EACvBxD,QAASA,EACTyD,cAAY,EACZC,oBAAkB,EAClBC,uBAAuB,EACvBC,MAAOxE,EACPyE,cAAc,eACdC,SA/HqB,SAACxK,EAAYyK,GACxC1E,EAAiB0E,GACL,OAARA,QAAQ,IAARA,GAAAA,EAAUC,UACZ7E,EAAe,CACb8E,aAAcF,EAASC,SAASnI,KAAK,KACrCqI,SAAU9D,IAEZK,GAAqB,IACXsD,IACVtE,EAAc,IACdN,EAAe,CAAC,GAChBsB,GAAqB,GAGzB,EAkHQ0D,cAjH0B,SAAC7K,EAAY8K,GAC7C3E,EAAc2E,GACdhD,GAAUgD,EACZ,EA+GQC,YAAa,SAACC,GAAM,OAClB7L,EAAAA,EAAAA,KAAC8L,EAAAA,GAASlC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJiC,GAAM,IACVnK,MAAM,2BACNhB,KAAK,QACLF,WAAS,IACT,EAEJuL,aAAc,SAAC5G,EAAOyF,GAAM,OAC1B5K,EAAAA,EAAAA,KAAA,MAAA4J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQzE,GAAK,IAAAnE,UACXC,EAAAA,EAAAA,MAAC+K,EAAAA,GAAI,CAACC,WAAS,EAACC,WAAW,SAAQlL,SAAA,EACjChB,EAAAA,EAAAA,KAACgM,EAAAA,GAAI,CAACvC,MAAI,EAACtJ,GAAI,CAAEmC,QAAS,OAAQY,MAAO,IAAKlC,UAC5ChB,EAAAA,EAAAA,KAACmM,EAAAA,EAAc,CAAChM,GAAI,CAAEQ,MAAO,uBAE/BM,EAAAA,EAAAA,MAAC+K,EAAAA,GAAI,CACHvC,MAAI,EACJtJ,GAAI,CAAE+C,MAAO,oBAAqBkJ,SAAU,cAAepL,SAAA,EAE3DhB,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CAACC,UAAU,OAAOnG,GAAI,CAAEkM,WAAY,WAAYrL,SAAA,GAAAnB,OAC9C+K,EAAO/G,KAAI,MAAAhE,OAAK+K,EAAO9G,cAE7B9D,EAAAA,EAAAA,KAACwK,EAAAA,EAAU,CAAC/J,QAAQ,QAAQE,MAAM,iBAAgBK,SAAA,GAAAnB,OAC5C+K,EAAO7G,QAAO,MAAAlE,OAAK+K,EAAOC,qBAIjC,OAIX7K,EAAAA,EAAAA,KAACqG,EAAAA,EAAG,CACFC,UAAU,MACVnG,GAAI,CACF,uBAAwB,CAAEC,EAAG,EAAG8C,MAAO,UACvClC,UAEFhB,EAAAA,EAAAA,KAAC8L,EAAAA,EAAS,CACRQ,QAAM,EACN5K,MAAM,kBACNyJ,MAAOxD,EACP0D,SAtJ0B,SAChCxK,GAEI0L,OAAOC,UAAUD,OAAO1L,EAAM6B,OAAOyI,UACvCvD,EAAiB2E,OAAO1L,EAAM6B,OAAOyI,QACpB,OAAbxE,QAAa,IAAbA,GAAAA,EAAe4E,WACjB7E,EAAe,CACb8E,aAAc7E,EAAc4E,SAASnI,KAAK,KAC1CqI,SAAUc,OAAO1L,EAAM6B,OAAOyI,SAEhCnD,GAAqB,IAI3B,EAyIQtH,KAAK,QACLF,WAAS,EAAAQ,SAERyL,MAAMC,KACL,CAAEzC,OAAQ,KACV,SAAC0C,EAAG1O,GAAK,OAAK,GAAa,GAARA,CAAU,IAC7B4H,KAAI,SAAC+E,GAAM,OACX5K,EAAAA,EAAAA,KAAC4M,EAAAA,EAAQ,CAAczB,MAAOP,EAAO5J,SAClC4J,GADYA,EAEJ,SAIjB5K,EAAAA,EAAAA,KAAC6M,EAAAA,EAAO,CAAC/M,MAAM,cAAakB,UACxB+G,GAAsBpB,GACtBoB,IAAsBpB,GAUtB3G,EAAAA,EAAAA,KAAA,QAAAgB,UACEhB,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAACF,QAlKI,WACxBiE,EAAiB,MACjBI,EAAc,IACdY,EAAiB,KACjBlB,EAAe,CAAC,GAChBsB,GAAqB,EACvB,EA4JiDhH,UACrChB,EAAAA,EAAAA,KAAC8M,EAAAA,EAAiB,SAXtB9M,EAAAA,EAAAA,KAAA,QAAAgB,UACEhB,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CACTkK,UAAWpG,IAAkBgB,EAC7BhF,QApJc,WACP,OAAbgE,QAAa,IAAbA,GAAAA,EAAe4E,SACjB7E,EAAe,CACb8E,aAAc7E,EAAc4E,SAASnI,KAAK,KAC1CqI,SAAU9D,IAGZjB,EAAe,CAAC,GAElBsB,GAAqB,EACvB,EA0IuChH,UAE3BhB,EAAAA,EAAAA,KAACgN,EAAAA,EAAc,WAWvBhN,EAAAA,EAAAA,KAACiN,EAAAA,EAAM,CAACC,QAAStN,OAGvB,CAEe,SAASuN,IACtB,IAAAC,EAA0BjP,EAAAA,cAAkCyE,GAAUyK,GAAAhP,EAAAA,EAAAA,GAAA+O,EAAA,GAA/D/H,EAAKgI,EAAA,GAAEC,EAAQD,EAAA,GACtBE,EAA8BpP,EAAAA,cAC5ByE,GACD4K,GAAAnP,EAAAA,EAAAA,GAAAkP,EAAA,GAFMjI,EAAOkI,EAAA,GAAEC,EAAUD,EAAA,GAG1BE,EAAgCvP,EAAAA,SAAkC,IAAGwP,GAAAtP,EAAAA,EAAAA,GAAAqP,EAAA,GAA9DjH,EAAQkH,EAAA,GAAEC,EAAWD,EAAA,GAC5BE,EAAwB1P,EAAAA,SAAuB,GAAE2P,GAAAzP,EAAAA,EAAAA,GAAAwP,EAAA,GAA1CE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAAsC9P,EAAAA,SAAuB,IAAG+P,GAAA7P,EAAAA,EAAAA,GAAA4P,EAAA,GAAzDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAsClQ,EAAAA,SAAoC,CAAC,GAAEmQ,GAAAjQ,EAAAA,EAAAA,GAAAgQ,EAAA,GAAtEE,EAAWD,EAAA,GAAE5H,EAAc4H,EAAA,GAC5BE,EAAoBrQ,EAAAA,OAAa,MACjCoN,GAAWtD,EAAAA,EAAAA,MACXwG,GAAWvG,EAAAA,EAAAA,MACXC,GAAqBC,EAAAA,EAAAA,MAE3BsG,GAII3F,EAAAA,EAAAA,GAAS,CACXzJ,SAAU,CAAC,SAAUyO,EAAMI,EAAa7I,EAASD,EAAOkJ,GACxDvF,QAAS2F,EAAAA,GACTxF,kBAAkB,EAClBC,OAAO,EACP5J,QAAS,SAACC,GACR0I,EAAmB,CACjBG,SAAU,QACVC,QAAS9I,aAAiB+I,MAAQ/I,EAAM8I,QAAUE,KAAKC,UAAUjJ,IAErE,IAbAG,EAAS8O,EAAT9O,UACAgP,EAAUF,EAAVE,WAAUC,EAAAH,EACVpN,KAAIwN,OAAA,IAAAD,EAAqB,CAAExF,MAAO,GAAIC,MAAO,GAAGuF,EAAxCxF,EAAKyF,EAALzF,MAAOC,GAAKwF,EAALxF,MAaXyF,GAAO1F,GAAS,GAEtBlL,EAAAA,WAAgB,WACVqQ,EAAkBQ,SACFR,EAAkBQ,QAC1BC,SAAS,CACjBC,IAAK,EACLC,KAAM,EACNC,SAAU,UAGhB,GAAG,CAACL,KAEJ5Q,EAAAA,WAAgB,WACd,IAAMkR,EAAwB,GAC9B5I,EAAS6I,SAAQ,SAACC,GACIR,GAAKS,MAAK,SAACnO,GAAG,OAAKA,EAAInB,KAAOqP,CAAY,KAE5DF,EAAYI,KAAKF,EAErB,IACA3B,EAAYyB,EACd,GAAG,CAACN,KAuEJ,OACE9N,EAAAA,EAAAA,MAACoF,EAAAA,EAAG,CAAClG,GAAI,CAAE+C,MAAO,OAAQ7C,OAAQ,QAASW,SAAA,EACzCC,EAAAA,EAAAA,MAACyO,EAAAA,EAAK,CAACvP,GAAI,CAAE+C,MAAO,OAAQ7C,OAAQ,OAAQiE,gBAAiB,SAAUtD,SAAA,EACrEhB,EAAAA,EAAAA,KAACwG,EAAoB,CACnBC,SAAUA,EACVC,eAAgB,SAACiJ,GACfjJ,EAAeiJ,GACf3B,EAAQ,EACV,KAEFhO,EAAAA,EAAAA,KAAC4P,EAAAA,EAAc,CACbC,IAAKrB,EACLrO,GAAI,CAAEE,OAAQ,sBAAuBW,UAErCC,EAAAA,EAAAA,MAAC6O,EAAAA,EAAK,CACJ3P,GAAI,CAAE4P,SAAU,KAChB,kBAAgB,aAChBrP,KAAK,QACLsP,cAAY,EAAAhP,SAAA,EAEZhB,EAAAA,EAAAA,KAACkF,EAAiB,CAChBM,YAAaiB,EAASwD,OACtB5E,MAAOA,EACPC,QAASA,EACTF,iBA9EiB,SAACvE,GAC5B,GAAIA,EAAM6B,OAAOuN,QAAjB,CACE,IAAMZ,EAAcN,GAAKlJ,KAAI,SAACqK,GAAQ,OAAKA,EAAEhQ,EAAE,IAC/C0N,EAAYyB,EAEd,MACAzB,EAAY,GACd,EAwEYrI,cA9Fc,SACxB1E,EACAuF,GAEA,IAAM+J,EAAQ7K,IAAYc,GAAsB,QAAVf,EACvBC,IAAYc,GAAsB,SAAVf,GAErCiI,OAAS1K,GACT6K,OAAW7K,KAEX0K,EAAS6C,EAAQ,OAAS,OAC1B1C,EAAWrH,GAEf,EAkFYX,SAAUsJ,GAAK9E,UAEjBjK,EAAAA,EAAAA,KAACoQ,EAAAA,EAAS,CAAApP,SACP+N,GAAKlJ,KAAI,SAACxE,EAAKpD,GACd,IAhCM4F,EAgCAwM,GAhCAxM,EAgC4B,GAADhE,OAAIwB,EAAInB,KAhCU,IAA5BuG,EAAS6J,QAAQzM,IAiCxC,OACE5C,EAAAA,EAAAA,MAACyE,EAAAA,EAAQ,CACP6K,OAAK,EACL5N,QAAS,SAAC9B,GA3E1B4N,EAAS,UAAD5O,OA2E+CwB,EA3E/BnB,IAAM,CAC5BsQ,SAAU,OACVC,MAAO,CAAE/D,KAAMnB,GACfmF,SAAS,GAwEgD,EAC3CC,KAAK,WACL,eAAcN,EACdO,UAAW,EAEXnK,SAAU4J,EACVlQ,GAAI,CAAE0Q,OAAQ,WAAY7P,SAAA,EAE1BhB,EAAAA,EAAAA,KAAC2E,EAAe,CAACiB,QAAQ,WAAU5E,UACjChB,EAAAA,EAAAA,KAAClC,EAAkB,CAACE,MAAOqD,EAAKpD,MAAOA,MAExCiD,EAAU2E,KAAI,SAACiL,GACd,IAAMC,EAAWD,EAAK1P,QAAQC,GAC9B,OACErB,EAAAA,EAAAA,KAAC2E,EAAe,CAEd7E,MAAOiR,EAASjR,MAChB6F,MAAOmL,EAAKtP,QAAU,QAAU,SAASR,SAExC+P,EAASzP,MAJLwP,EAAK5Q,GAOhB,MAlBKmB,EAAInB,GAqBf,YAINF,EAAAA,EAAAA,KAACgR,EAAAA,EAAe,CACdC,mBAAoB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5C3K,UAAU,MACV4K,MAAO5H,GACP6E,YAAaA,EACbJ,KAAMA,EACNoD,aAlFiB,SAACtQ,EAAgBuQ,GACxCpD,EAAQoD,EACV,EAiFQC,oBA/EwB,SAC9BxQ,GAEAuN,EAAekD,SAASzQ,EAAM6B,OAAOyI,MAAO,KAC5C6C,EAAQ,EACV,QA6EIhO,EAAAA,EAAAA,KAACiN,EAAAA,EAAM,CAACC,QAAStN,GAAagP,MAGpC,C","sources":["trucksNearby/reserveTruckButton.tsx","trucksNearby/trucksNearby.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { addMinutes } from 'date-fns';\r\n\r\nimport { TruckUpdate } from '../api';\r\nimport { Truck } from '../utils/dataTypes';\r\n\r\nconst reservationTime = 15; // 15 minutes\r\n\r\nconst calcReserveWillLast = (reservedTill: Date | '' | undefined) => {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  let reservedWillLast = (reservedTill - new Date()) / (1000 * 60);\r\n  reservedWillLast = reservedWillLast > 0 ? Math.ceil(reservedWillLast) : 0;\r\n  return reservedWillLast;\r\n};\r\n\r\nexport default function ReserveTruckButton({\r\n  truck,\r\n  index,\r\n}: {\r\n  truck: Truck;\r\n  index: number;\r\n}) {\r\n  const [remainReserved, setRemainReserved] = React.useState<number>(0);\r\n  const { reservedAt, reservedBy } = truck;\r\n  const reservedTill =\r\n    reservedAt && addMinutes(new Date(reservedAt), reservationTime);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const isReserved = new Date() < reservedTill;\r\n\r\n  React.useEffect(() => {\r\n    if (isReserved) {\r\n      setRemainReserved(calcReserveWillLast(reservedTill));\r\n      const interval = setInterval(() => {\r\n        setRemainReserved(calcReserveWillLast(reservedTill));\r\n      }, 1000 * 2);\r\n      return () => {\r\n        clearInterval(interval);\r\n        setRemainReserved(0);\r\n      };\r\n    }\r\n  }, [isReserved, reservedTill]);\r\n\r\n  const queryClient = useQueryClient();\r\n  const { mutate, isLoading } = useMutation(TruckUpdate, {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['trucks'],\r\n        refetchType: 'active',\r\n      });\r\n      return;\r\n    },\r\n    onError: (error: Error) => {\r\n      return;\r\n    },\r\n  });\r\n\r\n  const reserveButtonClickHandler = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    mutate({ id: truck.id, reservedAt: isReserved ? null : new Date() });\r\n  };\r\n\r\n  const labelId = `enhanced-table-checkbox-${index}`;\r\n  const title = `${\r\n    isReserved && reservedBy\r\n      ? 'Reserved by:\\n' +\r\n        reservedBy.fullName +\r\n        '\\nTime left: ' +\r\n        remainReserved +\r\n        'min'\r\n      : ''\r\n  }`;\r\n  return (\r\n    <Button\r\n      id={`${labelId}`}\r\n      title={title}\r\n      sx={{ m: 1, height: '35px', lineHeight: 'normal', fontSize: 'x-small' }}\r\n      fullWidth\r\n      variant=\"contained\"\r\n      size=\"small\"\r\n      color=\"primary\"\r\n      onClickCapture={reserveButtonClickHandler}\r\n    >\r\n      {isReserved ? (\r\n        <span>\r\n          Unreserve\r\n          <br />({remainReserved}min)\r\n        </span>\r\n      ) : (\r\n        'Reserve'\r\n      )}\r\n    </Button>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\r\n\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FilterListOffIcon from '@mui/icons-material/FilterListOff';\r\nimport ContentCopy from '@mui/icons-material/ContentCopy';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { debounce } from '@mui/material/utils';\r\n\r\nimport ReserveTruckButton from './reserveTruckButton';\r\n\r\nimport Loader from '../components/Loader';\r\nimport { LocationsQuery, TrucksQuery, TruckDelete } from '../api';\r\nimport { useSnackbar } from '../hooks';\r\nimport { Order, Truck, Location, Result } from '../utils/dataTypes';\r\nimport { getPath, getType, modifyedQueryFn } from '../utils/queryHelpers';\r\nimport { stopPropagation } from '../utils/stopPropagation';\r\n\r\ninterface HeadCell {\r\n  id: string;\r\n  disablePadding: boolean;\r\n  orderField?: keyof Truck;\r\n  getData: (row: Truck) => { data: JSX.Element | string; title?: string };\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n  {\r\n    id: 'truckNumber',\r\n    orderField: 'truckNumber',\r\n    getData: (row) => ({ data: `${row.truckNumber}` }),\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Truck Number',\r\n  },\r\n  {\r\n    id: 'mainContactInfo',\r\n    getData: (row) => {\r\n      const person = row.coordinator || row.owner;\r\n      let path = '';\r\n      let type = '';\r\n      let firstRow = '';\r\n      let secondRow = '';\r\n      if (person) {\r\n        path = `./${getPath(person)}/view/${person.id}`;\r\n        type = `${getType(person)} `;\r\n        firstRow = `${person.fullName}`;\r\n        secondRow = `${person?.phone}`;\r\n      }\r\n      return {\r\n        data: (\r\n          <span style={{ display: 'flex' }}>\r\n            <span\r\n              style={{\r\n                textOverflow: 'ellipsis',\r\n                overflow: 'hidden',\r\n              }}\r\n            >\r\n              <b>{type}</b>\r\n              <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                {firstRow}\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={secondRow ? `tel:${secondRow}` : undefined}\r\n                target=\"_blank\"\r\n                onClick={stopPropagation}\r\n              >\r\n                {secondRow || ' '}\r\n              </a>\r\n            </span>\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={(event) => {\r\n                stopPropagation(event);\r\n                navigator.clipboard.writeText(firstRow + ' ' + secondRow);\r\n              }}\r\n            >\r\n              <ContentCopy sx={{ height: '16px', width: '16px' }} />\r\n            </IconButton>\r\n          </span>\r\n        ),\r\n        title: type + '' + firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Main Contact info',\r\n  },\r\n  {\r\n    id: 'truckInfo',\r\n    getData: (row) => {\r\n      const firstRow = row.type ? `${row.type}` : '';\r\n      const secondRow = row.equipment ? `${row.equipment.join(', ')}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Truck info',\r\n  },\r\n  {\r\n    id: 'payload',\r\n    getData: (row) => {\r\n      const firstRow = row.grossWeight ? `${row.grossWeight}` : '';\r\n      const secondRow = row.payload ? `${row.payload}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Weight/Payload',\r\n  },\r\n  {\r\n    id: 'dims',\r\n    getData: (row) => {\r\n      const firstRow = row.insideDims ? `${row.insideDims}` : '';\r\n      const secondRow = row.doorDims ? `${row.doorDims}` : '';\r\n\r\n      return {\r\n        data: (\r\n          <span>\r\n            {firstRow}\r\n            <br />\r\n            {secondRow}\r\n          </span>\r\n        ),\r\n        title: firstRow + '\\n' + secondRow,\r\n      };\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Inside/Door DIMS',\r\n  },\r\n  {\r\n    id: 'status',\r\n    orderField: 'status',\r\n    getData: (row) => ({ data: `${row.status}` }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Status',\r\n  },\r\n  {\r\n    id: 'roadsDistance',\r\n    getData: (row) => ({\r\n      data: `${row.milesByRoads ? row.milesByRoads.toFixed(2) : ''}`,\r\n    }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Road distance',\r\n  },\r\n  {\r\n    id: 'location',\r\n    getData: (row) => {\r\n      if (row?.lastCity) {\r\n        const path = `./locations/view/${row.lastCity.id}`;\r\n        const firstRow = `${row.lastCity.name}, ${row.lastCity.stateCode}, ${row.lastCity.zipCode}`;\r\n        const secondRow = `${\r\n          row.locationUpdatedAt\r\n            ? new Date(row.locationUpdatedAt).toLocaleString()\r\n            : ''\r\n        }`;\r\n\r\n        return {\r\n          data: (\r\n            <span style={{ display: 'flex' }}>\r\n              <span\r\n                style={{\r\n                  textOverflow: 'ellipsis',\r\n                  overflow: 'hidden',\r\n                }}\r\n              >\r\n                <a href={path} target=\"_blank\" onClick={stopPropagation}>\r\n                  {firstRow}\r\n                </a>\r\n                <br />\r\n                {secondRow}\r\n              </span>\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={(event) => {\r\n                  stopPropagation(event);\r\n                  navigator.clipboard.writeText(firstRow);\r\n                }}\r\n              >\r\n                <ContentCopy sx={{ height: '16px', width: '16px' }} />\r\n              </IconButton>\r\n            </span>\r\n          ),\r\n          title: firstRow + '\\n' + secondRow,\r\n        };\r\n      } else {\r\n        return { data: '' };\r\n      }\r\n    },\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Last known location',\r\n  },\r\n  {\r\n    id: 'calcDistance',\r\n    getData: (row) => ({\r\n      data: `${row.milesHaversine ? row.milesHaversine.toFixed(2) : ''}`,\r\n    }),\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Origin away',\r\n  },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Truck,\r\n  ) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order | undefined;\r\n  orderBy: string | undefined;\r\n  rowCount: number;\r\n}\r\n\r\nconst StyledTableHead = styled(TableHead)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  maxWidth: '100px',\r\n  paddingTop: '6px',\r\n  paddingBottom: '6px',\r\n  whiteSpace: 'nowrap',\r\n  textOverflow: 'ellipsis',\r\n  overflow: 'hidden',\r\n}));\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler =\r\n    (property: keyof Truck) => (event: React.MouseEvent<unknown>) => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n  return (\r\n    <StyledTableHead>\r\n      <TableRow>\r\n        <StyledTableCell align=\"center\" padding=\"checkbox\">\r\n          Actions\r\n        </StyledTableCell>\r\n        {headCells.map((headCell) => (\r\n          <StyledTableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'center'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={headCell.orderField && orderBy === headCell.orderField}\r\n              hideSortIcon={!headCell.orderField}\r\n              direction={orderBy === headCell.orderField ? order : 'asc'}\r\n              onClick={\r\n                headCell.orderField\r\n                  ? createSortHandler(headCell.orderField)\r\n                  : () => {\r\n                      return;\r\n                    }\r\n              }\r\n            >\r\n              {headCell.label}\r\n              {headCell.orderField && orderBy === headCell.orderField ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </StyledTableHead>\r\n  );\r\n}\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  selected: readonly string[];\r\n  setQueryParams: React.Dispatch<\r\n    React.SetStateAction<Record<string, number | string>>\r\n  >;\r\n}\r\n\r\nfunction EnhancedTableToolbar(props: EnhancedTableToolbarProps) {\r\n  const { selected, setQueryParams } = props;\r\n  const [locationValue, setLocationValue] = React.useState<Location | null>(\r\n    null,\r\n  );\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [locationsQueryParams, setLocationsQueryParams] = React.useState<{\r\n    search?: any;\r\n  }>({});\r\n  const [options, setOptions] = React.useState<readonly Location[]>([]);\r\n  const [distanceValue, setDistanceValue] = React.useState(200);\r\n  const [searchDataChanged, setSearchDataChanged] =\r\n    React.useState<boolean>(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const { mutate, isLoading } = useMutation(TruckDelete, {\r\n    onSuccess: () => {\r\n      setSnackbarMessage({\r\n        severity: 'success',\r\n        message: 'Deleted',\r\n      });\r\n      queryClient.invalidateQueries(['trucks']);\r\n    },\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n\r\n  const setSearch = React.useMemo(() => {\r\n    return debounce((search: string): void => {\r\n      setLocationsQueryParams({ search });\r\n    }, 400);\r\n  }, []);\r\n  const { data: { items } = { items: [], total: 0 } } = useQuery<\r\n    Result<Location>,\r\n    Error,\r\n    Result<Location>,\r\n    any // ToDo fix type\r\n  >({\r\n    queryKey: ['locations', 0, 15, 'name', 'asc', locationsQueryParams],\r\n    queryFn: modifyedQueryFn(LocationsQuery, true),\r\n    keepPreviousData: true,\r\n    retry: false,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (locationValue) {\r\n      const notSelectedItems = items.filter(\r\n        (item) => item.id !== locationValue.id,\r\n      );\r\n      setOptions([locationValue, ...notSelectedItems]);\r\n    } else {\r\n      if (inputValue === '') {\r\n        setOptions([]);\r\n      } else {\r\n        setOptions([...items]);\r\n      }\r\n    }\r\n  }, [locationValue, items]);\r\n\r\n  const handleLocationChange = (event: any, newValue: Location | null) => {\r\n    setLocationValue(newValue);\r\n    if (newValue?.location) {\r\n      setQueryParams({\r\n        lastLocation: newValue.location.join(','),\r\n        distance: distanceValue,\r\n      });\r\n      setSearchDataChanged(false);\r\n    } else if (!newValue) {\r\n      setInputValue('');\r\n      setQueryParams({});\r\n      setSearchDataChanged(false);\r\n    }\r\n    // setSearchDataChanged(true);\r\n  };\r\n  const handleLocationInputChange = (event: any, newInputValue: string) => {\r\n    setInputValue(newInputValue);\r\n    setSearch(newInputValue);\r\n  };\r\n  const handleDistanceInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (Number.isInteger(Number(event.target.value))) {\r\n      setDistanceValue(Number(event.target.value));\r\n      if (locationValue?.location) {\r\n        setQueryParams({\r\n          lastLocation: locationValue.location.join(','),\r\n          distance: Number(event.target.value),\r\n        });\r\n        setSearchDataChanged(false);\r\n      }\r\n      // setSearchDataChanged(true);\r\n    }\r\n  };\r\n  const handleClearFilter = () => {\r\n    setLocationValue(null);\r\n    setInputValue('');\r\n    setDistanceValue(200);\r\n    setQueryParams({});\r\n    setSearchDataChanged(false);\r\n  };\r\n  const handleApplyFilter = () => {\r\n    if (locationValue?.location) {\r\n      setQueryParams({\r\n        lastLocation: locationValue.location.join(','),\r\n        distance: distanceValue,\r\n      });\r\n    } else {\r\n      setQueryParams({});\r\n    }\r\n    setSearchDataChanged(false);\r\n  };\r\n  const createHandler = () => {\r\n    navigate('./create', {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const editHandler = () => {\r\n    navigate(`./edit/${selected[0]}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n  const deleteHandler = () => {\r\n    mutate(`${selected[0]}`);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(selected.length > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity,\r\n            ),\r\n        }),\r\n      }}\r\n    >\r\n      {selected.length > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {selected.length} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            flex: '1 1 100%',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n          }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Trucks Nearby\r\n        </Typography>\r\n      )}\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '350px' },\r\n        }}\r\n      >\r\n        <Autocomplete\r\n          getOptionLabel={(option) =>\r\n            typeof option === 'string'\r\n              ? option\r\n              : `${option.name}, ${option.zipCode}, ${option.stateName}`\r\n          }\r\n          filterOptions={(x) => x}\r\n          options={options}\r\n          autoComplete\r\n          includeInputInList\r\n          filterSelectedOptions={false}\r\n          value={locationValue}\r\n          noOptionsText=\"No locations\"\r\n          onChange={handleLocationChange}\r\n          onInputChange={handleLocationInputChange}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Enter city, state or zip\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          )}\r\n          renderOption={(props, option) => (\r\n            <li {...props}>\r\n              <Grid container alignItems=\"center\">\r\n                <Grid item sx={{ display: 'flex', width: 44 }}>\r\n                  <LocationOnIcon sx={{ color: 'text.secondary' }} />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}\r\n                >\r\n                  <Box component=\"span\" sx={{ fontWeight: 'regular' }}>\r\n                    {`${option.name}, ${option.stateCode}`}\r\n                  </Box>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {`${option.zipCode}, ${option.stateName}`}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </li>\r\n          )}\r\n        />\r\n      </Box>\r\n      <Box\r\n        component=\"div\"\r\n        sx={{\r\n          '& .MuiTextField-root': { m: 1, width: '140px' },\r\n        }}\r\n      >\r\n        <TextField\r\n          select\r\n          label=\"Select Distance\"\r\n          value={distanceValue}\r\n          onChange={handleDistanceInputChange}\r\n          size=\"small\"\r\n          fullWidth\r\n        >\r\n          {Array.from(\r\n            { length: (1000 - 50) / 50 + 1 },\r\n            (_, index) => 50 + index * 50,\r\n          ).map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Box>\r\n      <Tooltip title=\"Filter list\">\r\n        {(searchDataChanged || !locationValue) &&\r\n        !(searchDataChanged && !locationValue) ? (\r\n          <span>\r\n            <IconButton\r\n              disabled={!locationValue || !distanceValue}\r\n              onClick={handleApplyFilter}\r\n            >\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </span>\r\n        ) : (\r\n          <span>\r\n            <IconButton onClick={handleClearFilter}>\r\n              <FilterListOffIcon />\r\n            </IconButton>\r\n          </span>\r\n        )}\r\n      </Tooltip>\r\n      <Loader visible={isLoading} />\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = React.useState<Order | undefined>(undefined);\r\n  const [orderBy, setOrderBy] = React.useState<keyof Truck | undefined>(\r\n    undefined,\r\n  );\r\n  const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(15);\r\n  const [queryParams, setQueryParams] = React.useState<Record<string, any>>({});\r\n  const tableContainerRef = React.useRef(null);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const setSnackbarMessage = useSnackbar();\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    data: { items, total } = { items: [], total: 0 },\r\n  } = useQuery({\r\n    queryKey: ['trucks', page, rowsPerPage, orderBy, order, queryParams],\r\n    queryFn: TrucksQuery,\r\n    keepPreviousData: true,\r\n    retry: false,\r\n    onError: (error: Error) => {\r\n      setSnackbarMessage({\r\n        severity: 'error',\r\n        message: error instanceof Error ? error.message : JSON.stringify(error),\r\n      });\r\n    },\r\n  });\r\n  const rows = items || [];\r\n\r\n  React.useEffect(() => {\r\n    if (tableContainerRef.current) {\r\n      const container = tableContainerRef.current as HTMLElement;\r\n      container.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [rows]);\r\n\r\n  React.useEffect(() => {\r\n    const newSelected: string[] = [];\r\n    selected.forEach((selectedItem) => {\r\n      const selectedRow = rows.find((row) => row.id === selectedItem);\r\n      if (selectedRow) {\r\n        newSelected.push(selectedItem);\r\n      }\r\n    });\r\n    setSelected(newSelected);\r\n  }, [rows]);\r\n\r\n  const handleRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Truck,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    if (isDesc) {\r\n      setOrder(undefined);\r\n      setOrderBy(undefined);\r\n    } else {\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map((n: Truck) => n.id);\r\n      setSelected(newSelected);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<unknown>,\r\n    item: (typeof rows)[number],\r\n  ) => {\r\n    navigate(`./view/${item.id}`, {\r\n      relative: 'path',\r\n      state: { from: location },\r\n      replace: false,\r\n    });\r\n  };\r\n\r\n  const handleSelect = (event: React.MouseEvent<unknown>, name: string) => {\r\n    event.stopPropagation();\r\n    // const selectedIndex = selected.indexOf(name);\r\n    // let newSelected: readonly string[] = [];\r\n    //\r\n    // if (selectedIndex === -1) {\r\n    //     newSelected = newSelected.concat(selected, name);\r\n    // } else if (selectedIndex === 0) {\r\n    //     newSelected = newSelected.concat(selected.slice(1));\r\n    // } else if (selectedIndex === selected.length - 1) {\r\n    //     newSelected = newSelected.concat(selected.slice(0, -1));\r\n    // } else if (selectedIndex > 0) {\r\n    //     newSelected = newSelected.concat(\r\n    //         selected.slice(0, selectedIndex),\r\n    //         selected.slice(selectedIndex + 1),\r\n    //     );\r\n    // }\r\n    //\r\n    // setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%' }}>\r\n      <Paper sx={{ width: '100%', height: '100%', backgroundColor: 'unset' }}>\r\n        <EnhancedTableToolbar\r\n          selected={selected}\r\n          setQueryParams={(query) => {\r\n            setQueryParams(query);\r\n            setPage(0);\r\n          }}\r\n        />\r\n        <TableContainer\r\n          ref={tableContainerRef}\r\n          sx={{ height: 'calc(100% - 115px)' }}\r\n        >\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"small\"\r\n            stickyHeader\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(`${row.id}`);\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    onClick={(event) => handleClick(event, row)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: 'pointer' }}\r\n                  >\r\n                    <StyledTableCell padding=\"checkbox\">\r\n                      <ReserveTruckButton truck={row} index={index} />\r\n                    </StyledTableCell>\r\n                    {headCells.map((cell) => {\r\n                      const cellData = cell.getData(row);\r\n                      return (\r\n                        <StyledTableCell\r\n                          key={cell.id}\r\n                          title={cellData.title}\r\n                          align={cell.numeric ? 'right' : 'center'}\r\n                        >\r\n                          {cellData.data}\r\n                        </StyledTableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25, 35, 50]}\r\n          component=\"div\"\r\n          count={total}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <Loader visible={isLoading || isFetching} />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["reservationTime","calcReserveWillLast","reservedTill","reservedWillLast","Date","Math","ceil","ReserveTruckButton","_ref","truck","index","_React$useState","React","_React$useState2","_slicedToArray","remainReserved","setRemainReserved","reservedAt","reservedBy","addMinutes","isReserved","interval","setInterval","clearInterval","queryClient","useQueryClient","_useMutation","useMutation","TruckUpdate","onSuccess","invalidateQueries","queryKey","refetchType","onError","error","mutate","labelId","isLoading","concat","title","fullName","_jsx","Button","id","sx","m","height","lineHeight","fontSize","fullWidth","variant","size","color","onClickCapture","event","preventDefault","stopPropagation","children","_jsxs","headCells","orderField","getData","row","data","truckNumber","numeric","disablePadding","label","person","coordinator","owner","path","type","firstRow","secondRow","getPath","getType","phone","style","display","textOverflow","overflow","href","target","onClick","undefined","IconButton","navigator","clipboard","writeText","ContentCopy","width","equipment","join","grossWeight","payload","insideDims","doorDims","status","milesByRoads","toFixed","lastCity","name","stateCode","zipCode","locationUpdatedAt","toLocaleString","milesHaversine","StyledTableHead","styled","TableHead","backgroundColor","theme","palette","background","default","StyledTableCell","TableCell","_ref2","maxWidth","paddingTop","paddingBottom","whiteSpace","EnhancedTableHead","props","onSelectAllClick","order","orderBy","onRequestSort","numSelected","rowCount","TableRow","align","padding","map","headCell","sortDirection","TableSortLabel","active","hideSortIcon","direction","property","Box","component","visuallyHidden","EnhancedTableToolbar","selected","setQueryParams","locationValue","setLocationValue","_React$useState3","_React$useState4","inputValue","setInputValue","_React$useState5","_React$useState6","locationsQueryParams","setLocationsQueryParams","_React$useState7","_React$useState8","options","setOptions","_React$useState9","_React$useState10","distanceValue","setDistanceValue","_React$useState11","_React$useState12","searchDataChanged","setSearchDataChanged","useLocation","useNavigate","setSnackbarMessage","useSnackbar","TruckDelete","severity","message","Error","JSON","stringify","setSearch","debounce","search","_useQuery$data","useQuery","queryFn","modifyedQueryFn","LocationsQuery","keepPreviousData","retry","items","total","notSelectedItems","filter","item","_toConsumableArray","Toolbar","_objectSpread","pl","sm","pr","xs","length","bgcolor","alpha","primary","main","action","activatedOpacity","Typography","flex","Autocomplete","getOptionLabel","option","stateName","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","value","noOptionsText","onChange","newValue","location","lastLocation","distance","onInputChange","newInputValue","renderInput","params","TextField","renderOption","Grid","container","alignItems","LocationOnIcon","wordWrap","fontWeight","select","Number","isInteger","Array","from","_","MenuItem","Tooltip","FilterListOffIcon","disabled","FilterListIcon","Loader","visible","EnhancedTable","_React$useState13","_React$useState14","setOrder","_React$useState15","_React$useState16","setOrderBy","_React$useState17","_React$useState18","setSelected","_React$useState19","_React$useState20","page","setPage","_React$useState21","_React$useState22","rowsPerPage","setRowsPerPage","_React$useState23","_React$useState24","queryParams","tableContainerRef","navigate","_useQuery2","TrucksQuery","isFetching","_useQuery2$data","_useQuery2$data2","rows","current","scrollTo","top","left","behavior","newSelected","forEach","selectedItem","find","push","Paper","query","TableContainer","ref","Table","minWidth","stickyHeader","checked","n","isAsc","TableBody","isItemSelected","indexOf","hover","relative","state","replace","role","tabIndex","cursor","cell","cellData","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"sourceRoot":""}