{"version":3,"file":"static/js/142.a22c3e45.chunk.js","mappings":"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","sources":["api/api.ts","ownersDrivers/createOwnerDriver.tsx","utils/dataTypes.ts"],"sourcesContent":["import { authProvider } from '../utils/auth';\nimport {\n  Coordinator,\n  CreateCoordinator,\n  UpdateCoordinator,\n  CreateCoordinatorDriver,\n  UpdateCoordinatorDriver,\n  Driver,\n  CreateDriver,\n  UpdateDriver,\n  Load,\n  CreateLoad,\n  UpdateLoad,\n  Location,\n  CreateLocation,\n  UpdateLocation,\n  Owner,\n  CreateOwner,\n  UpdateOwner,\n  CreateOwnerDriver,\n  UpdateOwnerDriver,\n  Truck,\n  CreateTruck,\n  UpdateTruck,\n  User,\n  CreateUser,\n  UpdateUser,\n  Query,\n  QuerySingle,\n  Result,\n} from '../utils/dataTypes';\n\nconst SUCCESS_HTTP_CODE = 200;\nconst CREATED_HTTP_CODE = 201;\nconst FORBIDDEN_HTTP_CODE = 403;\nconst NOT_FOUND_HTTP_CODE = 404;\nconst CONFLICT_HTTP_CODE = 409;\n\nconst { origin } = new URL(window.location.href);\n\nconst transformBody = (body: object): Record<string, any> => {\n  const transformedBody: Record<string, any> = {};\n  Object.entries(body).forEach((entry) => {\n    if (Array.isArray(entry[1])) {\n      transformedBody[entry[0]] = entry[1].map((elem) =>\n        typeof elem === 'object' && !(elem instanceof Date) ? elem.id : elem,\n      );\n    } else if (typeof entry[1] === 'object' && !(entry[1] instanceof Date)) {\n      transformedBody[entry[0]] = entry[1] && entry[1].id;\n    } else {\n      transformedBody[entry[0]] = entry[1];\n    }\n  });\n  return transformedBody;\n};\n\nexport const authFetch: (\n  input: string | URL,\n  init?: RequestInit & { bodyObj?: object },\n) => Promise<object> = (input, init = {}) => {\n  const { bodyObj, ...restInit } = init;\n  const fetchInit = { ...restInit, headers: new Headers() };\n  fetchInit.headers.set(\n    'Authorization',\n    'Basic ' +\n      btoa(authProvider.user?.username + ':' + authProvider.user?.password),\n  );\n  if (bodyObj && typeof bodyObj === 'object') {\n    fetchInit.headers.set('Accept', 'application/json');\n    fetchInit.headers.set('Content-Type', 'application/json');\n    fetchInit.body = JSON.stringify(transformBody(bodyObj));\n  }\n  return fetch(input, fetchInit)\n    .catch((reason) => {\n      const error = new Error();\n      error.cause = reason;\n      error.name = 'Fetch error';\n      error.message = 'Network error has occurred';\n      throw error;\n    })\n    .then((response) => {\n      if (\n        response.status !== SUCCESS_HTTP_CODE &&\n        response.status !== CREATED_HTTP_CODE\n      ) {\n        const error = new Error();\n        error.cause = response;\n        if (response.status) {\n          error.name = response.status + ' ' + response.statusText;\n          switch (response.status) {\n            case FORBIDDEN_HTTP_CODE:\n              error.message = 'Insufficient permissions';\n              break;\n            case NOT_FOUND_HTTP_CODE:\n              error.message = 'Not found';\n              break;\n            case CONFLICT_HTTP_CODE:\n              error.message = 'Some field values invalidate unique constrain';\n              break;\n            default:\n              error.message = 'Some server error has occurred';\n          }\n        } else {\n          error.message = 'Network error has occurred';\n        }\n        throw error;\n      }\n      return response.json().catch((reason) => {\n        const error = new Error();\n        error.cause = reason;\n        error.name = 'Fetch error';\n        error.message = 'Server responded with incorrect data';\n        throw error;\n      });\n    });\n};\n\nexport const TrucksQuery: (\n  query: Query<{\n    search?: number;\n    truckNumber?: number;\n    lastLocation?: string;\n    distance?: string;\n  }>,\n) => Promise<Result<Truck>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/truck', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.lastLocation && queryParams?.distance) {\n    url.searchParams.append('lastLocation', `${queryParams.lastLocation}`);\n    url.searchParams.append('distance', `${queryParams.distance}`);\n  }\n  return authFetch(url) as Promise<Result<Truck>>;\n};\n\nexport const TruckDelete = (userId: string): Promise<Truck> => {\n  const url = new URL(`/truck/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Truck>;\n};\n\nexport const TruckCreate = (data: CreateTruck): Promise<Truck> => {\n  const url = new URL(`/truck`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Truck>;\n};\n\nexport const TruckUpdate = (data: UpdateTruck): Promise<Truck> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/truck/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Truck>;\n};\n\nexport const TruckQuery = (query: QuerySingle): Promise<Truck> => {\n  const url = new URL(`/truck/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Truck>;\n};\n\nexport const LocationsQuery: (\n  query: Query<{ search?: string; name?: string }>,\n) => Promise<Result<Location>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/location', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.name) {\n    url.searchParams.append('name', `${queryParams.name}`);\n  }\n  return authFetch(url) as Promise<Result<Location>>;\n};\n\nexport const LocationDelete = (userId: string): Promise<Location> => {\n  const url = new URL(`/location/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Location>;\n};\n\nexport const LocationCreate = (data: CreateLocation): Promise<Location> => {\n  const url = new URL(`/location`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Location>;\n};\n\nexport const LocationUpdate = (data: UpdateLocation): Promise<Location> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/location/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Location>;\n};\n\nexport const LocationQuery = (query: QuerySingle): Promise<Location> => {\n  const url = new URL(`/location/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Location>;\n};\n\nexport const LoadsQuery: (\n  query: Query<{ loadNumber?: number; truckNumber?: number }>,\n) => Promise<Result<Load>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/load', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.loadNumber) {\n    url.searchParams.append('loadNumber', `${queryParams.loadNumber}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Load>>;\n};\n\nexport const LoadDelete = (userId: string): Promise<Load> => {\n  const url = new URL(`/load/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Load>;\n};\n\nexport const LoadCreate = (data: CreateLoad): Promise<Load> => {\n  const url = new URL(`/load`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Load>;\n};\n\nexport const LoadUpdate = (data: UpdateLoad): Promise<Load> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/load/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Load>;\n};\n\nexport const LoadQuery = (query: QuerySingle): Promise<Load> => {\n  const url = new URL(`/load/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Load>;\n};\n\nexport const OwnersQuery: (\n  query: Query<{ search?: string; fullName?: number; truckNumber?: number }>,\n) => Promise<Result<Owner>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/owner', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  return authFetch(url) as Promise<Result<Owner>>;\n};\n\nexport const OwnerDelete = (userId: string): Promise<Owner> => {\n  const url = new URL(`/owner/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Owner>;\n};\n\nexport const OwnerCreate = (data: CreateOwner): Promise<Owner> => {\n  const url = new URL(`/owner`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Owner>;\n};\n\nexport const OwnerUpdate = (data: UpdateOwner): Promise<Owner> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/owner/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Owner>;\n};\n\nexport const OwnerQuery = (query: QuerySingle): Promise<Owner> => {\n  const url = new URL(`/owner/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Owner>;\n};\n\nexport const OwnerDriverCreate = (data: CreateOwnerDriver): Promise<Owner> => {\n  const url = new URL(`/ownerDriver`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Owner>;\n};\n\nexport const OwnerDriverUpdate = (data: UpdateOwnerDriver): Promise<Owner> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/ownerDriver/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Owner>;\n};\n\nexport const OwnerDriverQuery = (query: QuerySingle): Promise<Owner> => {\n  const url = new URL(`/ownerDriver/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Owner>;\n};\n\nexport const DriversQuery: (\n  query: Query<{\n    search?: string;\n    fullName?: number;\n    truckNumber?: number;\n    owner?: string;\n  }>,\n) => Promise<Result<Driver>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/driver', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.owner) {\n    url.searchParams.append('owner', `${queryParams.owner}`);\n  }\n  return authFetch(url) as Promise<Result<Driver>>;\n};\n\nexport const DriverDelete = (userId: string): Promise<Driver> => {\n  const url = new URL(`/driver/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Driver>;\n};\n\nexport const DriverCreate = (data: CreateDriver): Promise<Driver> => {\n  const url = new URL(`/driver`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Driver>;\n};\n\nexport const DriverUpdate = (data: UpdateDriver): Promise<Driver> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/driver/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Driver>;\n};\n\nexport const DriverQuery = (query: QuerySingle): Promise<Driver> => {\n  const url = new URL(`/driver/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Driver>;\n};\n\nexport const CoordinatorsQuery: (\n  query: Query<{\n    search?: string;\n    fullName?: number;\n    truckNumber?: number;\n    owner?: string;\n  }>,\n) => Promise<Result<Coordinator>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/coordinator', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  if (queryParams?.truckNumber) {\n    url.searchParams.append('truckNumber', `${queryParams.truckNumber}`);\n  }\n  if (queryParams?.owner) {\n    url.searchParams.append('owner', `${queryParams.owner}`);\n  }\n  return authFetch(url) as Promise<Result<Coordinator>>;\n};\n\nexport const CoordinatorDelete = (userId: string): Promise<Coordinator> => {\n  const url = new URL(`/coordinator/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorCreate = (\n  data: CreateCoordinator,\n): Promise<Coordinator> => {\n  const url = new URL(`/coordinator`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorUpdate = (\n  data: UpdateCoordinator,\n): Promise<Coordinator> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/coordinator/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorQuery = (query: QuerySingle): Promise<Coordinator> => {\n  const url = new URL(`/coordinator/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorDriverCreate = (\n  data: CreateCoordinatorDriver,\n): Promise<Coordinator> => {\n  const url = new URL(`/coordinatorDriver`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorDriverUpdate = (\n  data: UpdateCoordinatorDriver,\n): Promise<Coordinator> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/coordinatorDriver/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<Coordinator>;\n};\n\nexport const CoordinatorDriverQuery = (\n  query: QuerySingle,\n): Promise<Coordinator> => {\n  const url = new URL(`/coordinatorDriver/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<Coordinator>;\n};\n\nexport const UsersQuery: (\n  query: Query<{ search?: string; fullName?: number }>,\n) => Promise<Result<User>> = ({\n  queryKey: [key, page, rowsPerPage, orderBy, order, queryParams],\n}) => {\n  const url = new URL('/user', origin);\n  url.searchParams.append('limit', `${rowsPerPage}`);\n  url.searchParams.append('offset', `${rowsPerPage * page}`);\n  if (orderBy && order) {\n    url.searchParams.append('orderby', `${orderBy}`);\n    url.searchParams.append('direction', `${order}`);\n  }\n  if (queryParams?.search) {\n    url.searchParams.append('search', `${queryParams.search}`);\n  }\n  if (queryParams?.fullName) {\n    url.searchParams.append('fullName', `${queryParams.fullName}`);\n  }\n  return authFetch(url) as Promise<Result<User>>;\n};\n\nexport const UserDelete = (userId: string): Promise<User> => {\n  const url = new URL(`/user/${userId}`, origin);\n  return authFetch(url, { method: 'DELETE' }) as Promise<User>;\n};\n\nexport const UserCreate = (data: CreateUser): Promise<User> => {\n  const url = new URL(`/user`, origin);\n  return authFetch(url, {\n    method: 'POST',\n    bodyObj: data,\n  }) as Promise<User>;\n};\n\nexport const UserUpdate = (data: UpdateUser): Promise<User> => {\n  const { id, ...updatedData } = data;\n  const url = new URL(`/user/${id}`, origin);\n  return authFetch(url, {\n    method: 'PATCH',\n    bodyObj: updatedData,\n  }) as Promise<User>;\n};\n\nexport const UserQuery = (query: QuerySingle): Promise<User> => {\n  const url = new URL(`/user/${query.queryKey[1]}`, origin);\n  return authFetch(url, {\n    method: 'GET',\n  }) as Promise<User>;\n};\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nimport {\n  DateField,\n  DateTimeField,\n  Loader,\n  SelectField,\n  TextField,\n} from '../components';\n\nimport { OwnerDriverCreate } from '../api';\nimport { useSnackbar } from '../hooks';\nimport {\n  CreateOwnerDriver,\n  LangPriorities,\n  LangPriority,\n} from '../utils/dataTypes';\n\nconst validationSchema = yup.object({\n  fullName: yup.string().required('Full Name is required'),\n  birthDate: yup\n    .date()\n    .typeError('Enter correct date')\n    .required('Birth Date is required'),\n  birthPlace: yup.string().required('Birth Place is required'),\n  citizenship: yup.string().required('Citizenship is required'),\n  languagePriority: yup\n    .string()\n    .oneOf(LangPriorities)\n    .required('Language Priorities is required'),\n  driverLicenceType: yup.string().required('Driver Licence Type is required'),\n  driverLicenceNumber: yup\n    .string()\n    .required('Driver Licence Number is required'),\n  driverLicenceState: yup.string().required('Driver Licence State is required'),\n  driverLicenceClass: yup.string().required('Driver Licence Class is required'),\n  driverLicenceExp: yup\n    .date()\n    .typeError('Enter correct date')\n    .required('Driver Licence Exp is required'),\n  idDocId: yup.string(),\n  idDocType: yup.string(),\n  idDocExp: yup.date().typeError('Enter correct date'),\n  hiredBy: yup.string().required('Hired By is required'),\n  hireDate: yup\n    .date()\n    .typeError('Enter correct date')\n    .required('Hire Date is required'),\n  snn: yup.string().required('Snn is required'),\n  company: yup.string(),\n  insurancePolicy: yup.string().required('Insurance Policy is required'),\n  insurancePolicyEFF: yup.string().required('Insurance Policy EFF is required'),\n  insurancePolicyExp: yup\n    .date()\n    .typeError('Enter correct date')\n    .required('Insurance Policy Exp is required'),\n  address: yup.string().required('Address is required'),\n  phone: yup.string().required('Phone is required'),\n  phone2: yup.string(),\n  email: yup\n    .string()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  emergencyContactName: yup\n    .string()\n    .required('Emergency Contact Name is required'),\n  emergencyContactRel: yup.string(),\n  emergencyContactPhone: yup\n    .string()\n    .required('Emergency Contact Phone EFF is required'),\n  appLogin: yup.string(),\n  appPass: yup.string(),\n  notes: yup.string(),\n});\n\nconst initialValues = {\n  fullName: undefined,\n  birthDate: undefined,\n  birthPlace: undefined,\n  citizenship: undefined,\n  languagePriority: 'EN' as LangPriority,\n  driverLicenceType: undefined,\n  driverLicenceNumber: undefined,\n  driverLicenceState: undefined,\n  driverLicenceClass: undefined,\n  driverLicenceExp: undefined,\n  idDocId: undefined,\n  idDocType: undefined,\n  idDocExp: undefined,\n  hiredBy: undefined,\n  hireDate: undefined,\n  snn: undefined,\n  company: undefined,\n  insurancePolicy: undefined,\n  insurancePolicyEFF: undefined,\n  insurancePolicyExp: undefined,\n  address: undefined,\n  phone: undefined,\n  phone2: undefined,\n  email: undefined,\n  emergencyContactName: undefined,\n  emergencyContactRel: undefined,\n  emergencyContactPhone: undefined,\n  appLogin: undefined,\n  appPass: undefined,\n  notes: undefined,\n};\n\nexport default function CreateOwnerDriverForm() {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const setSnackbarMessage = useSnackbar();\n\n  const { mutate, isLoading } = useMutation(OwnerDriverCreate, {\n    onSuccess: () => {\n      setSnackbarMessage({\n        severity: 'success',\n        message: 'Created',\n      });\n      queryClient.invalidateQueries(['owners', 'drivers']);\n      navigate(-1);\n    },\n    onError: (error: Error) => {\n      setSnackbarMessage({\n        severity: 'error',\n        message: error instanceof Error ? error.message : JSON.stringify(error),\n      });\n    },\n  });\n\n  const formik = useFormik<CreateOwnerDriver>({\n    initialValues,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      mutate(values as unknown as CreateOwnerDriver);\n    },\n  });\n\n  const handleClose = () => {\n    navigate(-1);\n  };\n\n  return (\n    <Box sx={{ height: '100%' }}>\n      <form\n        onSubmit={formik.handleSubmit}\n        onReset={formik.handleReset}\n        style={{ height: '100%' }}\n      >\n        <Box sx={{ p: 3, display: 'grid', height: '100%' }}>\n          <Box\n            key=\"controls\"\n            sx={{\n              height: '100%',\n              overflowX: 'hidden',\n              overflowY: 'scroll',\n            }}\n          >\n            <Box key=\"topControls\" sx={{ p: 1, paddingBottom: 0 }}>\n              <TextField\n                fieldName=\"fullName\"\n                label=\"Full Name\"\n                formik={formik}\n              />\n            </Box>\n            <Box\n              key=\"centerControls\"\n              sx={{ display: 'inline-flex', width: '100%' }}\n            >\n              <Box\n                key=\"left\"\n                sx={{ p: 1, paddingTop: 0, paddingBottom: 0, width: '50%' }}\n              >\n                <DateField\n                  fieldName=\"birthDate\"\n                  label=\"Birth Date\"\n                  formik={formik}\n                />\n                <SelectField\n                  fieldName=\"languagePriority\"\n                  label=\"Language Priority\"\n                  items={LangPriorities}\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"driverLicenceType\"\n                  label=\"Driver Licence Type\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"driverLicenceState\"\n                  label=\"Driver Licence State\"\n                  formik={formik}\n                />\n                <DateField\n                  fieldName=\"driverLicenceExp\"\n                  label=\"Driver Licence Exp\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"idDocType\"\n                  label=\"Id Doc Type\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"hiredBy\"\n                  label=\"Hired By\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"company\"\n                  label=\"Company\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"insurancePolicyEFF\"\n                  label=\"Insurance Policy EFF\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"address\"\n                  label=\"Address\"\n                  formik={formik}\n                />\n                <TextField fieldName=\"email\" label=\"Email\" formik={formik} />\n                <TextField\n                  fieldName=\"emergencyContactName\"\n                  label=\"Emergency Contact Name\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"emergencyContactPhone\"\n                  label=\"Emergency Contact Phone\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"appLogin\"\n                  label=\"Mobile App Login\"\n                  formik={formik}\n                />\n              </Box>\n              <Box\n                key=\"right\"\n                sx={{ p: 1, paddingTop: 0, paddingBottom: 0, width: '50%' }}\n              >\n                <TextField\n                  fieldName=\"birthPlace\"\n                  label=\"Birth Place\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"citizenship\"\n                  label=\"Citizenship\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"driverLicenceNumber\"\n                  label=\"Driver Licence Number\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"driverLicenceClass\"\n                  label=\"Driver Licence Class\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"idDocId\"\n                  label=\"Id Doc Id\"\n                  formik={formik}\n                />\n                <DateField\n                  fieldName=\"idDocExp\"\n                  label=\"Id Doc Exp\"\n                  formik={formik}\n                />\n                <TextField fieldName=\"snn\" label=\"Snn\" formik={formik} />\n                <DateField\n                  fieldName=\"hireDate\"\n                  label=\"Hire Date\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"insurancePolicy\"\n                  label=\"Insurance Policy\"\n                  formik={formik}\n                />\n                <DateTimeField\n                  fieldName=\"insurancePolicyExp\"\n                  label=\"Insurance Policy Exp\"\n                  formik={formik}\n                />\n                <TextField fieldName=\"phone\" label=\"Phone\" formik={formik} />\n                <TextField fieldName=\"phone2\" label=\"Phone2\" formik={formik} />\n                <TextField\n                  fieldName=\"emergencyContactRel\"\n                  label=\"Emergency Contact Rel\"\n                  formik={formik}\n                />\n                <TextField\n                  fieldName=\"appPass\"\n                  label=\"Mobile App Pass\"\n                  formik={formik}\n                />\n              </Box>\n            </Box>\n            <Box\n              key=\"bottomControls\"\n              sx={{ p: 1, paddingBottom: 0, paddingTop: 0 }}\n            >\n              <TextField\n                fieldName=\"notes\"\n                label=\"Notes\"\n                multiline\n                formik={formik}\n              />\n            </Box>\n          </Box>\n          <Box key=\"buttons\" sx={{ paddingTop: 3, display: 'inline-flex' }}>\n            <Box key=\"left\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Create\n              </Button>\n            </Box>\n            <Box key=\"right\" sx={{ p: 1, paddingTop: 0, width: '50%' }}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                type=\"button\"\n                onClick={handleClose}\n              >\n                Cancel\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </form>\n      <Loader visible={isLoading} />\n    </Box>\n  );\n}\n","import React from 'react';\nimport { AlertColor } from '@mui/material/Alert/Alert';\n\nexport const LangPriorities = ['EN', 'UA', 'ES', 'RU'] as const;\n\nexport const PersonTypes = [\n  'Owner',\n  'OwnerDriver',\n  'Coordinator',\n  'CoordinatorDriver',\n  'Driver',\n] as const;\n\nexport const UserRoles = ['Admin', 'Super Admin'] as const;\n\nexport const TruckTypes = [\n  'Cargo van',\n  'Reefer van',\n  'Box truck',\n  'Box truck Reefer',\n  'Straight truck',\n  'Hotshot',\n  'Tented box',\n] as const;\n\nexport const TruckStatuses = ['Available', 'Not Available'] as const;\n\nexport const TruckCrossborders = ['Yes', 'No'] as const;\n\nexport const TruckCertificates = [\n  'Hazmat',\n  'Tsa',\n  'TWIC',\n  'Tanker Endorsement',\n] as const;\n\nexport const TruckEquipments = [\n  'Dock height risers',\n  'Air ride',\n  'Lift gate',\n  'Keep from freezing',\n  'ICC bar',\n  'Vertical E-track',\n  'Horizontal E-track',\n  'Pallet jack',\n  'PPE',\n  'Ramps',\n  'Straps',\n  'Loads bars',\n  'Blankets',\n  'Pads',\n  'Fire extinguisher',\n] as const;\n\nexport type Order = 'asc' | 'desc';\nexport type QueryKey<T> = readonly [\n  key: string,\n  page: number,\n  rowsPerPage: number,\n  orderBy?: string,\n  order?: Order,\n  queryParams?: T,\n];\n// export type BaseQuery = {\n//   readonly queryKey: QueryKey;\n// };\nexport type Query<T> = {\n  readonly queryKey: QueryKey<T>;\n};\nexport type QuerySingleKey = readonly [key: string, recordId: string];\nexport type QuerySingle = {\n  readonly queryKey: QuerySingleKey;\n};\nexport type Result<T> = {\n  items: T[];\n  limit: number;\n  offset: number;\n  total: number;\n};\nexport type QueryFn = (query: Query<{ search: any }>) => Promise<Result<any>>;\nexport interface AuthContextType {\n  user: any;\n  signin: (\n    username: string,\n    password: string,\n    callback: (res: boolean) => void,\n  ) => void;\n  signout: (callback: VoidFunction) => void;\n}\nexport type SnackbarMessage = {\n  message: string;\n  severity: AlertColor;\n  handleClose?: (event?: React.SyntheticEvent | Event, reason?: string) => void;\n};\nexport type PersonType = (typeof PersonTypes)[number];\nexport type LangPriority = (typeof LangPriorities)[number];\nexport type UserRole = (typeof UserRoles)[number];\nexport type TruckType = (typeof TruckTypes)[number];\nexport type TruckStatus = (typeof TruckStatuses)[number];\nexport type TruckCrossborder = (typeof TruckCrossborders)[number];\nexport type TruckCertificate = (typeof TruckCertificates)[number];\nexport type TruckEquipment = (typeof TruckEquipments)[number];\n\nexport interface Person {\n  id: string;\n  fullName: string;\n  type: PersonType;\n  phone?: string;\n}\n\nexport interface Owner extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email: string;\n  address: string;\n  ownTrucks?: Truck[];\n  coordinators?: Coordinator[];\n  drivers?: Driver[];\n}\n\nexport interface CreateOwner {\n  fullName?: string;\n  birthDate?: Date;\n  birthPlace?: string;\n  citizenship?: string;\n  languagePriority?: LangPriority;\n  hiredBy?: string;\n  hireDate?: Date;\n  snn?: string;\n  company?: string;\n  insurancePolicy?: string;\n  insurancePolicyEFF?: string;\n  insurancePolicyExp?: Date;\n  address?: string;\n  phone?: string;\n  phone2?: string;\n  email?: string;\n  emergencyContactName?: string;\n  emergencyContactRel?: string;\n  emergencyContactPhone?: string;\n  notes?: string;\n}\n\nexport interface UpdateOwner extends Partial<CreateOwner> {\n  id: string;\n}\n\nexport interface CreateOwnerDriver {\n  fullName?: string;\n  birthDate?: Date;\n  birthPlace?: string;\n  citizenship?: string;\n  languagePriority?: LangPriority;\n  driverLicenceType?: string;\n  driverLicenceNumber?: string;\n  driverLicenceState?: string;\n  driverLicenceClass?: string;\n  driverLicenceExp?: Date;\n  idDocId?: string;\n  idDocType?: string;\n  idDocExp?: Date;\n  hiredBy?: string;\n  hireDate?: Date;\n  snn?: string;\n  company?: string;\n  insurancePolicy?: string;\n  insurancePolicyEFF?: string;\n  insurancePolicyExp?: Date;\n  address?: string;\n  phone?: string;\n  phone2?: string;\n  email?: string;\n  emergencyContactName?: string;\n  emergencyContactRel?: string;\n  emergencyContactPhone?: string;\n  appLogin?: string;\n  appPass?: string;\n  notes?: string;\n}\n\nexport interface UpdateOwnerDriver extends Partial<CreateOwnerDriver> {\n  id: string;\n}\n\nexport interface Coordinator extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email: string;\n  address: string;\n  coordinateTrucks?: Truck[];\n  owner: Owner;\n}\n\nexport interface CreateCoordinator {\n  fullName?: string;\n  birthDate?: Date;\n  birthPlace?: string;\n  citizenship?: string;\n  languagePriority?: LangPriority;\n  hiredBy?: string;\n  hireDate?: Date;\n  snn?: string;\n  company?: string;\n  insurancePolicy?: string;\n  insurancePolicyEFF?: string;\n  insurancePolicyExp?: Date;\n  address?: string;\n  phone?: string;\n  phone2?: string;\n  email?: string;\n  emergencyContactName?: string;\n  emergencyContactRel?: string;\n  emergencyContactPhone?: string;\n  owner?: Owner;\n  notes?: string;\n}\n\nexport interface UpdateCoordinator extends Partial<CreateCoordinator> {\n  id: string;\n}\n\nexport interface CreateCoordinatorDriver {\n  fullName?: string;\n  birthDate?: Date;\n  birthPlace?: string;\n  citizenship?: string;\n  languagePriority?: LangPriority;\n  driverLicenceType?: string;\n  driverLicenceNumber?: string;\n  driverLicenceState?: string;\n  driverLicenceClass?: string;\n  driverLicenceExp?: Date;\n  idDocId?: string;\n  idDocType?: string;\n  idDocExp?: Date;\n  hiredBy?: string;\n  hireDate?: Date;\n  snn?: string;\n  company?: string;\n  insurancePolicy?: string;\n  insurancePolicyEFF?: string;\n  insurancePolicyExp?: Date;\n  address?: string;\n  phone?: string;\n  phone2?: string;\n  email?: string;\n  emergencyContactName?: string;\n  emergencyContactRel?: string;\n  emergencyContactPhone?: string;\n  appLogin?: string;\n  appPass?: string;\n  notes?: string;\n}\n\nexport interface UpdateCoordinatorDriver\n  extends Partial<CreateCoordinatorDriver> {\n  id: string;\n}\n\nexport interface Driver extends Person {\n  type: PersonType;\n  phone: string;\n  phone2?: string;\n  email?: string;\n  address?: string;\n  driveTrucks?: Truck[];\n  owner: Owner;\n}\n\nexport interface CreateDriver {\n  fullName?: string;\n  birthDate?: Date;\n  birthPlace?: string;\n  citizenship?: string;\n  languagePriority?: LangPriority;\n  driverLicenceType?: string;\n  driverLicenceNumber?: string;\n  driverLicenceState?: string;\n  driverLicenceClass?: string;\n  driverLicenceExp?: Date;\n  idDocId?: string;\n  idDocType?: string;\n  idDocExp?: Date;\n  hiredBy?: string;\n  hireDate?: Date;\n  address?: string;\n  phone?: string;\n  phone2?: string;\n  email?: string;\n  emergencyContactName?: string;\n  emergencyContactRel?: string;\n  emergencyContactPhone?: string;\n  appLogin?: string;\n  appPass?: string;\n  owner?: Owner;\n  notes?: string;\n}\n\nexport interface UpdateDriver extends Partial<CreateDriver> {\n  id: string;\n}\n\nexport interface Truck {\n  id: string;\n  truckNumber: number;\n  status: TruckStatus;\n  lastLocation?: [number, number];\n  lastCity?: Location;\n  locationUpdatedAt?: string;\n  milesHaversine?: number;\n  milesByRoads?: number;\n  crossborder: TruckCrossborder;\n  certificate: TruckCertificate;\n  type: TruckType;\n  equipment?: TruckEquipment[];\n  payload?: number;\n  grossWeight: string;\n  make: string;\n  model: string;\n  year: number;\n  color: string;\n  vinCode: string;\n  licencePlate: string;\n  licenceState: string;\n  plateExpires: Date;\n  insideDims: string;\n  doorDims?: string;\n  validDims: string;\n  owner?: Owner;\n  coordinator?: Coordinator;\n  driver?: Driver;\n}\n\nexport interface CreateTruck {\n  truckNumber?: number;\n  status?: TruckStatus;\n  crossborder?: TruckCrossborder;\n  certificate?: TruckCertificate;\n  type?: TruckType;\n  equipment?: TruckEquipment[];\n  payload?: number;\n  grossWeight?: string;\n  make?: string;\n  model?: string;\n  year?: number;\n  color?: string;\n  vinCode?: string;\n  licencePlate?: string;\n  licenceState?: string;\n  plateExpires?: Date;\n  insideDims?: string;\n  doorDims?: string;\n  validDims?: string;\n  owner?: Owner;\n  coordinator?: Coordinator;\n  driver?: Driver;\n}\n\nexport interface UpdateTruck extends Partial<CreateTruck> {\n  id: string;\n}\n\nexport interface Load {\n  id: string;\n  loadNumber: number;\n  pick?: Location;\n  pickDate?: Date;\n  deliver?: Location;\n  deliverDate?: Date;\n  milesByRoads?: number;\n  milesHaversine?: number;\n  weight: string;\n  truckType: TruckType[];\n  rate?: number;\n  bookedByUser?: User;\n  bookedByCompany?: string;\n  dispatchers?: User[];\n  checkInAs?: string;\n  truck?: Truck;\n}\n\nexport interface CreateLoad {\n  pick?: Location;\n  pickDate?: Date;\n  deliver?: Location;\n  deliverDate?: Date;\n  weight?: string;\n  truckType?: TruckType[];\n  rate?: number;\n  bookedByUser?: User;\n  bookedByCompany?: string;\n  dispatchers?: User[];\n  checkInAs?: string;\n  truck?: Truck;\n}\n\nexport interface UpdateLoad extends Partial<CreateLoad> {\n  id: string;\n}\n\nexport interface Location {\n  id: string;\n  zipCode: string;\n  name: string;\n  stateCode: string;\n  stateName: string;\n  location: [number, number];\n}\n\nexport type CreateLocation = Omit<Location, 'id'>;\n\nexport interface UpdateLocation extends Partial<CreateLocation> {\n  id: string;\n}\n\nexport interface User {\n  id: string;\n  fullName: string;\n  phone?: string;\n  userRole: UserRole;\n  jobTitle: string;\n  email: string;\n}\n\nexport interface CreateUser extends Omit<User, 'id'> {\n  password?: string;\n}\n\nexport interface UpdateUser extends Partial<CreateUser> {\n  id: string;\n}\n"],"names":["origin","URL","window","location","href","authFetch","input","_authProvider$user","_authProvider$user2","init","arguments","length","undefined","bodyObj","restInit","_objectWithoutProperties","_excluded","fetchInit","_objectSpread","headers","Headers","set","btoa","authProvider","user","username","password","body","JSON","stringify","transformedBody","Object","entries","forEach","entry","Array","isArray","map","elem","Date","id","transformBody","fetch","catch","reason","error","Error","cause","name","message","then","response","status","statusText","json","TrucksQuery","_ref","_ref$queryKey","_slicedToArray","queryKey","page","rowsPerPage","orderBy","order","queryParams","url","searchParams","append","concat","search","truckNumber","lastLocation","distance","TruckDelete","userId","method","TruckCreate","data","TruckUpdate","updatedData","_excluded2","TruckQuery","query","LocationsQuery","_ref2","_ref2$queryKey","LocationDelete","LocationCreate","LocationUpdate","_excluded3","LocationQuery","LoadsQuery","_ref3","_ref3$queryKey","loadNumber","LoadDelete","LoadCreate","LoadUpdate","_excluded4","LoadQuery","OwnersQuery","_ref4","_ref4$queryKey","fullName","OwnerDelete","OwnerCreate","OwnerUpdate","_excluded5","OwnerQuery","OwnerDriverCreate","OwnerDriverUpdate","_excluded6","OwnerDriverQuery","DriversQuery","_ref5","_ref5$queryKey","owner","DriverDelete","DriverCreate","DriverUpdate","_excluded7","DriverQuery","CoordinatorsQuery","_ref6","_ref6$queryKey","CoordinatorDelete","CoordinatorCreate","CoordinatorUpdate","_excluded8","CoordinatorQuery","CoordinatorDriverCreate","CoordinatorDriverUpdate","_excluded9","CoordinatorDriverQuery","UsersQuery","_ref7","_ref7$queryKey","UserDelete","UserCreate","UserUpdate","_excluded10","UserQuery","validationSchema","yup","required","birthDate","typeError","birthPlace","citizenship","languagePriority","oneOf","LangPriorities","driverLicenceType","driverLicenceNumber","driverLicenceState","driverLicenceClass","driverLicenceExp","idDocId","idDocType","idDocExp","hiredBy","hireDate","snn","company","insurancePolicy","insurancePolicyEFF","insurancePolicyExp","address","phone","phone2","email","emergencyContactName","emergencyContactRel","emergencyContactPhone","appLogin","appPass","notes","initialValues","CreateOwnerDriverForm","navigate","useNavigate","queryClient","useQueryClient","setSnackbarMessage","useSnackbar","_useMutation","useMutation","onSuccess","severity","invalidateQueries","onError","mutate","isLoading","formik","useFormik","enableReinitialize","onSubmit","values","_jsxs","Box","sx","height","children","_jsx","handleSubmit","onReset","handleReset","style","p","display","overflowX","overflowY","paddingBottom","TextField","fieldName","label","width","paddingTop","DateField","SelectField","items","DateTimeField","multiline","Button","fullWidth","variant","size","color","type","onClick","Loader","visible","UserRoles","TruckTypes","TruckStatuses","TruckCrossborders","TruckCertificates","TruckEquipments"],"sourceRoot":""}